<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="stringprep — Internet String Preparation" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/stringprep.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="Source code: Lib/stringprep.py[https://github.com/python/cpython/tree/3.13/Lib/stringprep.py] When identifying things (such as host names) in the internet, it is often necessary to compare such ide..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="Source code: Lib/stringprep.py[https://github.com/python/cpython/tree/3.13/Lib/stringprep.py] When identifying things (such as host names) in the internet, it is often necessary to compare such ide..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>stringprep — Internet String Preparation</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    
    <link rel="canonical" href="https://docs.python.org/3/library/stringprep.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-stringprep">
<span id="stringprep-internet-string-preparation"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">stringprep</span></code> — Internet String Preparation</h1>
<p><strong>Source code:</strong> <a class="extlink-source reference external" href="https://github.com/python/cpython/tree/3.13/Lib/stringprep.py">Lib/stringprep.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.13/Lib/stringprep.py]</span></p>
<hr class="docutils" />
<p>When identifying things (such as host names) in the internet, it is often
necessary to compare such identifications for “equality”. Exactly how this
comparison is executed may depend on the application domain, e.g. whether it
should be case-insensitive or not. It may be also necessary to restrict the
possible identifications, to allow only identifications consisting of
“printable” characters.</p>
<p><span class="target" id="index-0"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc3454.html"><strong>RFC 3454</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc3454.html]</span> defines a procedure for “preparing” Unicode strings in internet
protocols. Before passing strings onto the wire, they are processed with the
preparation procedure, after which they have a certain normalized form. The RFC
defines a set of tables, which can be combined into profiles. Each profile must
define which tables it uses, and what other optional parts of the <code class="docutils literal notranslate"><span class="pre">stringprep</span></code>
procedure are part of the profile. One example of a <code class="docutils literal notranslate"><span class="pre">stringprep</span></code> profile is
<code class="docutils literal notranslate"><span class="pre">nameprep</span></code>, which is used for internationalized domain names.</p>
<p>The module <a class="reference internal" href="#module-stringprep" title="stringprep: String preparation, as per RFC 3453"><code class="xref py py-mod docutils literal notranslate"><span class="pre">stringprep</span></code></a> only exposes the tables from <span class="target" id="index-1"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc3454.html"><strong>RFC 3454</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc3454.html]</span>. As these
tables would be very large to represent as dictionaries or lists, the
module uses the Unicode character database internally. The module source code
itself was generated using the <code class="docutils literal notranslate"><span class="pre">mkstringprep.py</span></code> utility.</p>
<p>As a result, these tables are exposed as functions, not as data structures.
There are two kinds of tables in the RFC: sets and mappings. For a set,
<a class="reference internal" href="#module-stringprep" title="stringprep: String preparation, as per RFC 3453"><code class="xref py py-mod docutils literal notranslate"><span class="pre">stringprep</span></code></a> provides the “characteristic function”, i.e. a function that
returns <code class="docutils literal notranslate"><span class="pre">True</span></code> if the parameter is part of the set. For mappings, it provides the
mapping function: given the key, it returns the associated value. Below is a
list of all functions available in the module.</p>
<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_a1">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_a1</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableA.1 (Unassigned code points in Unicode 3.2).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_b1">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_b1</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableB.1 (Commonly mapped to nothing).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.map_table_b2">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">map_table_b2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the mapped value for <em>code</em> according to tableB.2 (Mapping for
case-folding used with NFKC).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.map_table_b3">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">map_table_b3</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the mapped value for <em>code</em> according to tableB.3 (Mapping for
case-folding used with no normalization).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c11">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c11</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableC.1.1  (ASCII space characters).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c12">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c12</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableC.1.2  (Non-ASCII space characters).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c11_c12">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c11_c12</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableC.1  (Space characters, union of C.1.1 and
C.1.2).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c21">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c21</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableC.2.1  (ASCII control characters).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c22">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c22</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableC.2.2  (Non-ASCII control characters).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c21_c22">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c21_c22</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableC.2  (Control characters, union of C.2.1 and
C.2.2).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c3">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c3</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableC.3  (Private use).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c4">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c4</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableC.4  (Non-character code points).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c5">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c5</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableC.5  (Surrogate codes).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c6">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c6</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableC.6  (Inappropriate for plain text).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c7">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c7</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableC.7  (Inappropriate for canonical
representation).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c8">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c8</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableC.8  (Change display properties or are
deprecated).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_c9">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_c9</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableC.9  (Tagging characters).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_d1">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_d1</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableD.1  (Characters with bidirectional property
“R” or “AL”).</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="stringprep.in_table_d2">
<span class="sig-prename descclassname"><span class="pre">stringprep.</span></span><span class="sig-name descname"><span class="pre">in_table_d2</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">code</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Determine whether <em>code</em> is in tableD.2  (Characters with bidirectional property
“L”).</p>
</dd></dl>

</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>