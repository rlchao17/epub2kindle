<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="copy — Shallow and deep copy operations" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/copy.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="Source code: Lib/copy.py[https://github.com/python/cpython/tree/3.13/Lib/copy.py] Assignment statements in Python do not copy objects, they create bindings between a target and an object. For colle..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="Source code: Lib/copy.py[https://github.com/python/cpython/tree/3.13/Lib/copy.py] Assignment statements in Python do not copy objects, they create bindings between a target and an object. For colle..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>copy — Shallow and deep copy operations</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    
    <link rel="canonical" href="https://docs.python.org/3/library/copy.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-copy">
<span id="copy-shallow-and-deep-copy-operations"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">copy</span></code> — Shallow and deep copy operations</h1>
<p><strong>Source code:</strong> <a class="extlink-source reference external" href="https://github.com/python/cpython/tree/3.13/Lib/copy.py">Lib/copy.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.13/Lib/copy.py]</span></p>
<hr class="docutils" />
<p>Assignment statements in Python do not copy objects, they create bindings
between a target and an object. For collections that are mutable or contain
mutable items, a copy is sometimes needed so one can change one copy without
changing the other. This module provides generic shallow and deep copy
operations (explained below).</p>
<p>Interface summary:</p>
<dl class="py function">
<dt class="sig sig-object py" id="copy.copy">
<span class="sig-prename descclassname"><span class="pre">copy.</span></span><span class="sig-name descname"><span class="pre">copy</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">obj</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return a shallow copy of <em>obj</em>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="copy.deepcopy">
<span class="sig-prename descclassname"><span class="pre">copy.</span></span><span class="sig-name descname"><span class="pre">deepcopy</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">obj</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">memo</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>Return a deep copy of <em>obj</em>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="copy.replace">
<span class="sig-prename descclassname"><span class="pre">copy.</span></span><span class="sig-name descname"><span class="pre">replace</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">obj</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">/</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">changes</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Creates a new object of the same type as <em>obj</em>, replacing fields with values
from <em>changes</em>.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.13.</span></p>
</div>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="copy.Error">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">copy.</span></span><span class="sig-name descname"><span class="pre">Error</span></span></dt>
<dd><p>Raised for module specific errors.</p>
</dd></dl>

<p id="shallow-vs-deep-copy">The difference between shallow and deep copying is only relevant for compound
objects (objects that contain other objects, like lists or class instances):</p>
<ul class="simple">
<li><p>A <em>shallow copy</em> constructs a new compound object and then (to the extent
possible) inserts <em>references</em> into it to the objects found in the original.</p></li>
<li><p>A <em>deep copy</em> constructs a new compound object and then, recursively, inserts
<em>copies</em> into it of the objects found in the original.</p></li>
</ul>
<p>Two problems often exist with deep copy operations that don’t exist with shallow
copy operations:</p>
<ul class="simple">
<li><p>Recursive objects (compound objects that, directly or indirectly, contain a
reference to themselves) may cause a recursive loop.</p></li>
<li><p>Because deep copy copies everything it may copy too much, such as data
which is intended to be shared between copies.</p></li>
</ul>
<p>The <a class="reference internal" href="#copy.deepcopy" title="copy.deepcopy"><code class="xref py py-func docutils literal notranslate"><span class="pre">deepcopy()</span></code></a> function avoids these problems by:</p>
<ul class="simple">
<li><p>keeping a <code class="docutils literal notranslate"><span class="pre">memo</span></code> dictionary of objects already copied during the current
copying pass; and</p></li>
<li><p>letting user-defined classes override the copying operation or the set of
components copied.</p></li>
</ul>
<p>This module does not copy types like module, method, stack trace, stack frame,
file, socket, window, or any similar types.  It does “copy” functions and
classes (shallow and deeply), by returning the original object unchanged; this
is compatible with the way these are treated by the <a class="reference internal" href="pickle.xhtml#module-pickle" title="pickle: Convert Python objects to streams of bytes and back."><code class="xref py py-mod docutils literal notranslate"><span class="pre">pickle</span></code></a> module.</p>
<p>Shallow copies of dictionaries can be made using <a class="reference internal" href="stdtypes.xhtml#dict.copy" title="dict.copy"><code class="xref py py-meth docutils literal notranslate"><span class="pre">dict.copy()</span></code></a>, and
of lists by assigning a slice of the entire list, for example,
<code class="docutils literal notranslate"><span class="pre">copied_list</span> <span class="pre">=</span> <span class="pre">original_list[:]</span></code>.</p>
<p id="index-0">Classes can use the same interfaces to control copying that they use to control
pickling.  See the description of module <a class="reference internal" href="pickle.xhtml#module-pickle" title="pickle: Convert Python objects to streams of bytes and back."><code class="xref py py-mod docutils literal notranslate"><span class="pre">pickle</span></code></a> for information on these
methods.  In fact, the <a class="reference internal" href="#module-copy" title="copy: Shallow and deep copy operations."><code class="xref py py-mod docutils literal notranslate"><span class="pre">copy</span></code></a> module uses the registered
pickle functions from the <a class="reference internal" href="copyreg.xhtml#module-copyreg" title="copyreg: Register pickle support functions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">copyreg</span></code></a> module.</p>
<p id="index-1">In order for a class to define its own copy implementation, it can define
special methods <a class="reference internal" href="#object.__copy__" title="object.__copy__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__copy__()</span></code></a> and <a class="reference internal" href="#object.__deepcopy__" title="object.__deepcopy__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__deepcopy__()</span></code></a>.</p>
<dl class="py method">
<dt class="sig sig-object py" id="object.__copy__">
<span class="sig-prename descclassname"><span class="pre">object.</span></span><span class="sig-name descname"><span class="pre">__copy__</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">self</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Called to implement the shallow copy operation;
no additional arguments are passed.</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="object.__deepcopy__">
<span class="sig-prename descclassname"><span class="pre">object.</span></span><span class="sig-name descname"><span class="pre">__deepcopy__</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">self</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">memo</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Called to implement the deep copy operation; it is passed one
argument, the <em>memo</em> dictionary.  If the <code class="docutils literal notranslate"><span class="pre">__deepcopy__</span></code> implementation needs
to make a deep copy of a component, it should call the <a class="reference internal" href="#copy.deepcopy" title="copy.deepcopy"><code class="xref py py-func docutils literal notranslate"><span class="pre">deepcopy()</span></code></a> function
with the component as first argument and the <em>memo</em> dictionary as second argument.
The <em>memo</em> dictionary should be treated as an opaque object.</p>
</dd></dl>

<p id="index-2">Function <code class="xref py py-func docutils literal notranslate"><span class="pre">copy.replace()</span></code> is more limited
than <a class="reference internal" href="#copy.copy" title="copy.copy"><code class="xref py py-func docutils literal notranslate"><span class="pre">copy()</span></code></a> and <a class="reference internal" href="#copy.deepcopy" title="copy.deepcopy"><code class="xref py py-func docutils literal notranslate"><span class="pre">deepcopy()</span></code></a>,
and only supports named tuples created by <a class="reference internal" href="collections.xhtml#collections.namedtuple" title="collections.namedtuple"><code class="xref py py-func docutils literal notranslate"><span class="pre">namedtuple()</span></code></a>,
<a class="reference internal" href="dataclasses.xhtml#module-dataclasses" title="dataclasses: Generate special methods on user-defined classes."><code class="xref py py-mod docutils literal notranslate"><span class="pre">dataclasses</span></code></a>, and other classes which define method <a class="reference internal" href="#object.__replace__" title="object.__replace__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__replace__()</span></code></a>.</p>
<dl class="py method">
<dt class="sig sig-object py" id="object.__replace__">
<span class="sig-prename descclassname"><span class="pre">object.</span></span><span class="sig-name descname"><span class="pre">__replace__</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">self</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">/</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">changes</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>This method should create a new object of the same type,
replacing fields with values from <em>changes</em>.</p>
</dd></dl>

<div class="admonition seealso">
<p class="admonition-title">See also</p>
<dl class="simple">
<dt>Module <a class="reference internal" href="pickle.xhtml#module-pickle" title="pickle: Convert Python objects to streams of bytes and back."><code class="xref py py-mod docutils literal notranslate"><span class="pre">pickle</span></code></a></dt><dd><p>Discussion of the special methods used to support object state retrieval and
restoration.</p>
</dd>
</dl>
</div>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>