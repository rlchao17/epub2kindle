<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="Platform Support" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/asyncio-platforms.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="The asyncio module is designed to be portable, but some platforms have subtle differences and limitations due to the platforms’ underlying architecture and capabilities. All Platforms: loop.add_rea..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="The asyncio module is designed to be portable, but some platforms have subtle differences and limitations due to the platforms’ underlying architecture and capabilities. All Platforms: loop.add_rea..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>Platform Support</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    
    <link rel="canonical" href="https://docs.python.org/3/library/asyncio-platforms.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="platform-support">
<span id="asyncio-platform-support"></span><h1>Platform Support</h1>
<p>The <a class="reference internal" href="asyncio.xhtml#module-asyncio" title="asyncio: Asynchronous I/O."><code class="xref py py-mod docutils literal notranslate"><span class="pre">asyncio</span></code></a> module is designed to be portable,
but some platforms have subtle differences and limitations
due to the platforms’ underlying architecture and capabilities.</p>
<section id="all-platforms">
<h2>All Platforms</h2>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_reader" title="asyncio.loop.add_reader"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_reader()</span></code></a> and <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_writer" title="asyncio.loop.add_writer"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_writer()</span></code></a>
cannot be used to monitor file I/O.</p></li>
</ul>
</section>
<section id="windows">
<h2>Windows</h2>
<p><strong>Source code:</strong> <a class="extlink-source reference external" href="https://github.com/python/cpython/tree/3.13/Lib/asyncio/proactor_events.py">Lib/asyncio/proactor_events.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.13/Lib/asyncio/proactor_events.py]</span>,
<a class="extlink-source reference external" href="https://github.com/python/cpython/tree/3.13/Lib/asyncio/windows_events.py">Lib/asyncio/windows_events.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.13/Lib/asyncio/windows_events.py]</span>,
<a class="extlink-source reference external" href="https://github.com/python/cpython/tree/3.13/Lib/asyncio/windows_utils.py">Lib/asyncio/windows_utils.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.13/Lib/asyncio/windows_utils.py]</span></p>
<hr class="docutils" />
<div class="versionchanged">
<p><span class="versionmodified changed">Changed in version 3.8: </span>On Windows, <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.ProactorEventLoop" title="asyncio.ProactorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">ProactorEventLoop</span></code></a> is now the default event loop.</p>
</div>
<p>All event loops on Windows do not support the following methods:</p>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.create_unix_connection" title="asyncio.loop.create_unix_connection"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.create_unix_connection()</span></code></a> and
<a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.create_unix_server" title="asyncio.loop.create_unix_server"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.create_unix_server()</span></code></a> are not supported.
The <a class="reference internal" href="socket.xhtml#socket.AF_UNIX" title="socket.AF_UNIX"><code class="xref py py-const docutils literal notranslate"><span class="pre">socket.AF_UNIX</span></code></a> socket family is specific to Unix.</p></li>
<li><p><a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_signal_handler" title="asyncio.loop.add_signal_handler"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_signal_handler()</span></code></a> and
<a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.remove_signal_handler" title="asyncio.loop.remove_signal_handler"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.remove_signal_handler()</span></code></a> are not supported.</p></li>
</ul>
<p><a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.SelectorEventLoop" title="asyncio.SelectorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorEventLoop</span></code></a> has the following limitations:</p>
<ul class="simple">
<li><p><a class="reference internal" href="selectors.xhtml#selectors.SelectSelector" title="selectors.SelectSelector"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectSelector</span></code></a> is used to wait on socket events:
it supports sockets and is limited to 512 sockets.</p></li>
<li><p><a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_reader" title="asyncio.loop.add_reader"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_reader()</span></code></a> and <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_writer" title="asyncio.loop.add_writer"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_writer()</span></code></a> only accept
socket handles (e.g. pipe file descriptors are not supported).</p></li>
<li><p>Pipes are not supported, so the <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.connect_read_pipe" title="asyncio.loop.connect_read_pipe"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.connect_read_pipe()</span></code></a>
and <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.connect_write_pipe" title="asyncio.loop.connect_write_pipe"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.connect_write_pipe()</span></code></a> methods are not implemented.</p></li>
<li><p><a class="reference internal" href="asyncio-subprocess.xhtml#asyncio-subprocess"><span class="std std-ref">Subprocesses</span></a> are not supported, i.e.
<a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.subprocess_exec" title="asyncio.loop.subprocess_exec"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.subprocess_exec()</span></code></a> and <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.subprocess_shell" title="asyncio.loop.subprocess_shell"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.subprocess_shell()</span></code></a>
methods are not implemented.</p></li>
</ul>
<p><a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.ProactorEventLoop" title="asyncio.ProactorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">ProactorEventLoop</span></code></a> has the following limitations:</p>
<ul class="simple">
<li><p>The <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_reader" title="asyncio.loop.add_reader"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_reader()</span></code></a> and <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.add_writer" title="asyncio.loop.add_writer"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.add_writer()</span></code></a>
methods are not supported.</p></li>
</ul>
<p>The resolution of the monotonic clock on Windows is usually around 15.6
milliseconds.  The best resolution is 0.5 milliseconds. The resolution depends on the
hardware (availability of <a class="reference external" href="https://en.wikipedia.org/wiki/High_Precision_Event_Timer">HPET</a><span class="link-target"> [https://en.wikipedia.org/wiki/High_Precision_Event_Timer]</span>) and on the
Windows configuration.</p>
<section id="subprocess-support-on-windows">
<span id="asyncio-windows-subprocess"></span><h3>Subprocess Support on Windows</h3>
<p>On Windows, the default event loop <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.ProactorEventLoop" title="asyncio.ProactorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">ProactorEventLoop</span></code></a> supports
subprocesses, whereas <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.SelectorEventLoop" title="asyncio.SelectorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorEventLoop</span></code></a> does not.</p>
<p>The <a class="reference internal" href="asyncio-policy.xhtml#asyncio.AbstractEventLoopPolicy.set_child_watcher" title="asyncio.AbstractEventLoopPolicy.set_child_watcher"><code class="xref py py-meth docutils literal notranslate"><span class="pre">policy.set_child_watcher()</span></code></a> function is also
not supported, as <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.ProactorEventLoop" title="asyncio.ProactorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">ProactorEventLoop</span></code></a> has a different mechanism
to watch child processes.</p>
</section>
</section>
<section id="macos">
<h2>macOS</h2>
<p>Modern macOS versions are fully supported.</p>
<p class="rubric">macOS &lt;= 10.8</p>
<p>On macOS 10.6, 10.7 and 10.8, the default event loop
uses <a class="reference internal" href="selectors.xhtml#selectors.KqueueSelector" title="selectors.KqueueSelector"><code class="xref py py-class docutils literal notranslate"><span class="pre">selectors.KqueueSelector</span></code></a>, which does not support
character devices on these versions.  The <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.SelectorEventLoop" title="asyncio.SelectorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorEventLoop</span></code></a>
can be manually configured to use <a class="reference internal" href="selectors.xhtml#selectors.SelectSelector" title="selectors.SelectSelector"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectSelector</span></code></a>
or <a class="reference internal" href="selectors.xhtml#selectors.PollSelector" title="selectors.PollSelector"><code class="xref py py-class docutils literal notranslate"><span class="pre">PollSelector</span></code></a> to support character devices on
these older versions of macOS.  Example:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span><span class="w"> </span><span class="nn">asyncio</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">selectors</span>

<span class="n">selector</span> <span class="o">=</span> <span class="n">selectors</span><span class="o">.</span><span class="n">SelectSelector</span><span class="p">()</span>
<span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">SelectorEventLoop</span><span class="p">(</span><span class="n">selector</span><span class="p">)</span>
<span class="n">asyncio</span><span class="o">.</span><span class="n">set_event_loop</span><span class="p">(</span><span class="n">loop</span><span class="p">)</span>
</pre></div>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>