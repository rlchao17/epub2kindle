<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="cmath — Mathematical functions for complex numbers" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/cmath.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="This module provides access to mathematical functions for complex numbers. The functions in this module accept integers, floating-point numbers or complex numbers as arguments. They will also accep..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="This module provides access to mathematical functions for complex numbers. The functions in this module accept integers, floating-point numbers or complex numbers as arguments. They will also accep..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>cmath — Mathematical functions for complex numbers</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    
    <link rel="canonical" href="https://docs.python.org/3/library/cmath.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-cmath">
<span id="cmath-mathematical-functions-for-complex-numbers"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">cmath</span></code> — Mathematical functions for complex numbers</h1>
<hr class="docutils" />
<p>This module provides access to mathematical functions for complex numbers.  The
functions in this module accept integers, floating-point numbers or complex
numbers as arguments. They will also accept any Python object that has either a
<a class="reference internal" href="../reference/datamodel.xhtml#object.__complex__" title="object.__complex__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__complex__()</span></code></a> or a <a class="reference internal" href="../reference/datamodel.xhtml#object.__float__" title="object.__float__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__float__()</span></code></a> method: these methods are used to
convert the object to a complex or floating-point number, respectively, and
the function is then applied to the result of the conversion.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>For functions involving branch cuts, we have the problem of deciding how to
define those functions on the cut itself. Following Kahan’s “Branch cuts for
complex elementary functions” paper, as well as Annex G of C99 and later C
standards, we use the sign of zero to distinguish one side of the branch cut
from the other: for a branch cut along (a portion of) the real axis we look
at the sign of the imaginary part, while for a branch cut along the
imaginary axis we look at the sign of the real part.</p>
<p>For example, the <a class="reference internal" href="#cmath.sqrt" title="cmath.sqrt"><code class="xref py py-func docutils literal notranslate"><span class="pre">cmath.sqrt()</span></code></a> function has a branch cut along the
negative real axis. An argument of <code class="docutils literal notranslate"><span class="pre">complex(-2.0,</span> <span class="pre">-0.0)</span></code> is treated as
though it lies <em>below</em> the branch cut, and so gives a result on the negative
imaginary axis:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">cmath</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="nb">complex</span><span class="p">(</span><span class="o">-</span><span class="mf">2.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">))</span>
<span class="go">-1.4142135623730951j</span>
</pre></div>
</div>
<p>But an argument of <code class="docutils literal notranslate"><span class="pre">complex(-2.0,</span> <span class="pre">0.0)</span></code> is treated as though it lies above
the branch cut:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">cmath</span><span class="o">.</span><span class="n">sqrt</span><span class="p">(</span><span class="nb">complex</span><span class="p">(</span><span class="o">-</span><span class="mf">2.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
<span class="go">1.4142135623730951j</span>
</pre></div>
</div>
</div>
<section id="conversions-to-and-from-polar-coordinates">
<h2>Conversions to and from polar coordinates</h2>
<p>A Python complex number <code class="docutils literal notranslate"><span class="pre">z</span></code> is stored internally using <em>rectangular</em>
or <em>Cartesian</em> coordinates.  It is completely determined by its <em>real
part</em> <code class="docutils literal notranslate"><span class="pre">z.real</span></code> and its <em>imaginary part</em> <code class="docutils literal notranslate"><span class="pre">z.imag</span></code>.</p>
<p><em>Polar coordinates</em> give an alternative way to represent a complex
number.  In polar coordinates, a complex number <em>z</em> is defined by the
modulus <em>r</em> and the phase angle <em>phi</em>. The modulus <em>r</em> is the distance
from <em>z</em> to the origin, while the phase <em>phi</em> is the counterclockwise
angle, measured in radians, from the positive x-axis to the line
segment that joins the origin to <em>z</em>.</p>
<p>The following functions can be used to convert from the native
rectangular coordinates to polar coordinates and back.</p>
<dl class="py function">
<dt class="sig sig-object py" id="cmath.phase">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">phase</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the phase of <em>x</em> (also known as the <em>argument</em> of <em>x</em>), as a float.
<code class="docutils literal notranslate"><span class="pre">phase(x)</span></code> is equivalent to <code class="docutils literal notranslate"><span class="pre">math.atan2(x.imag,</span> <span class="pre">x.real)</span></code>.  The result
lies in the range [-<em>π</em>, <em>π</em>], and the branch cut for this operation lies
along the negative real axis.  The sign of the result is the same as the
sign of <code class="docutils literal notranslate"><span class="pre">x.imag</span></code>, even when <code class="docutils literal notranslate"><span class="pre">x.imag</span></code> is zero:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">phase</span><span class="p">(</span><span class="nb">complex</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
<span class="go">3.141592653589793</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">phase</span><span class="p">(</span><span class="nb">complex</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.0</span><span class="p">))</span>
<span class="go">-3.141592653589793</span>
</pre></div>
</div>
</dd></dl>

<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The modulus (absolute value) of a complex number <em>x</em> can be
computed using the built-in <a class="reference internal" href="functions.xhtml#abs" title="abs"><code class="xref py py-func docutils literal notranslate"><span class="pre">abs()</span></code></a> function.  There is no
separate <a class="reference internal" href="#module-cmath" title="cmath: Mathematical functions for complex numbers."><code class="xref py py-mod docutils literal notranslate"><span class="pre">cmath</span></code></a> module function for this operation.</p>
</div>
<dl class="py function">
<dt class="sig sig-object py" id="cmath.polar">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">polar</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the representation of <em>x</em> in polar coordinates.  Returns a
pair <code class="docutils literal notranslate"><span class="pre">(r,</span> <span class="pre">phi)</span></code> where <em>r</em> is the modulus of <em>x</em> and phi is the
phase of <em>x</em>.  <code class="docutils literal notranslate"><span class="pre">polar(x)</span></code> is equivalent to <code class="docutils literal notranslate"><span class="pre">(abs(x),</span>
<span class="pre">phase(x))</span></code>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.rect">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">rect</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">r</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">phi</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the complex number <em>x</em> with polar coordinates <em>r</em> and <em>phi</em>.
Equivalent to <code class="docutils literal notranslate"><span class="pre">complex(r</span> <span class="pre">*</span> <span class="pre">math.cos(phi),</span> <span class="pre">r</span> <span class="pre">*</span> <span class="pre">math.sin(phi))</span></code>.</p>
</dd></dl>

</section>
<section id="power-and-logarithmic-functions">
<h2>Power and logarithmic functions</h2>
<dl class="py function">
<dt class="sig sig-object py" id="cmath.exp">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">exp</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return <em>e</em> raised to the power <em>x</em>, where <em>e</em> is the base of natural
logarithms.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.log">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">log</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="optional">[</span>, <em class="sig-param"><span class="n"><span class="pre">base</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>Returns the logarithm of <em>x</em> to the given <em>base</em>. If the <em>base</em> is not
specified, returns the natural logarithm of <em>x</em>. There is one branch cut,
from 0 along the negative real axis to -∞.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.log10">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">log10</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the base-10 logarithm of <em>x</em>. This has the same branch cut as
<a class="reference internal" href="#cmath.log" title="cmath.log"><code class="xref py py-func docutils literal notranslate"><span class="pre">log()</span></code></a>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.sqrt">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">sqrt</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the square root of <em>x</em>. This has the same branch cut as <a class="reference internal" href="#cmath.log" title="cmath.log"><code class="xref py py-func docutils literal notranslate"><span class="pre">log()</span></code></a>.</p>
</dd></dl>

</section>
<section id="trigonometric-functions">
<h2>Trigonometric functions</h2>
<dl class="py function">
<dt class="sig sig-object py" id="cmath.acos">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">acos</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the arc cosine of <em>x</em>. There are two branch cuts: One extends right
from 1 along the real axis to ∞. The other extends left from -1 along the
real axis to -∞.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.asin">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">asin</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the arc sine of <em>x</em>. This has the same branch cuts as <a class="reference internal" href="#cmath.acos" title="cmath.acos"><code class="xref py py-func docutils literal notranslate"><span class="pre">acos()</span></code></a>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.atan">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">atan</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the arc tangent of <em>x</em>. There are two branch cuts: One extends from
<code class="docutils literal notranslate"><span class="pre">1j</span></code> along the imaginary axis to <code class="docutils literal notranslate"><span class="pre">∞j</span></code>. The other extends from <code class="docutils literal notranslate"><span class="pre">-1j</span></code>
along the imaginary axis to <code class="docutils literal notranslate"><span class="pre">-∞j</span></code>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.cos">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">cos</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the cosine of <em>x</em>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.sin">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">sin</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the sine of <em>x</em>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.tan">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">tan</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the tangent of <em>x</em>.</p>
</dd></dl>

</section>
<section id="hyperbolic-functions">
<h2>Hyperbolic functions</h2>
<dl class="py function">
<dt class="sig sig-object py" id="cmath.acosh">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">acosh</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the inverse hyperbolic cosine of <em>x</em>. There is one branch cut,
extending left from 1 along the real axis to -∞.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.asinh">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">asinh</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the inverse hyperbolic sine of <em>x</em>. There are two branch cuts:
One extends from <code class="docutils literal notranslate"><span class="pre">1j</span></code> along the imaginary axis to <code class="docutils literal notranslate"><span class="pre">∞j</span></code>.  The other
extends from <code class="docutils literal notranslate"><span class="pre">-1j</span></code> along the imaginary axis to <code class="docutils literal notranslate"><span class="pre">-∞j</span></code>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.atanh">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">atanh</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the inverse hyperbolic tangent of <em>x</em>. There are two branch cuts: One
extends from <code class="docutils literal notranslate"><span class="pre">1</span></code> along the real axis to <code class="docutils literal notranslate"><span class="pre">∞</span></code>. The other extends from
<code class="docutils literal notranslate"><span class="pre">-1</span></code> along the real axis to <code class="docutils literal notranslate"><span class="pre">-∞</span></code>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.cosh">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">cosh</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the hyperbolic cosine of <em>x</em>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.sinh">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">sinh</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the hyperbolic sine of <em>x</em>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.tanh">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">tanh</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the hyperbolic tangent of <em>x</em>.</p>
</dd></dl>

</section>
<section id="classification-functions">
<h2>Classification functions</h2>
<dl class="py function">
<dt class="sig sig-object py" id="cmath.isfinite">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">isfinite</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return <code class="docutils literal notranslate"><span class="pre">True</span></code> if both the real and imaginary parts of <em>x</em> are finite, and
<code class="docutils literal notranslate"><span class="pre">False</span></code> otherwise.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.isinf">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">isinf</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return <code class="docutils literal notranslate"><span class="pre">True</span></code> if either the real or the imaginary part of <em>x</em> is an
infinity, and <code class="docutils literal notranslate"><span class="pre">False</span></code> otherwise.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.isnan">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">isnan</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">x</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return <code class="docutils literal notranslate"><span class="pre">True</span></code> if either the real or the imaginary part of <em>x</em> is a NaN,
and <code class="docutils literal notranslate"><span class="pre">False</span></code> otherwise.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="cmath.isclose">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">isclose</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">a</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">b</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">rel_tol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">1e-09</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">abs_tol</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">0.0</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return <code class="docutils literal notranslate"><span class="pre">True</span></code> if the values <em>a</em> and <em>b</em> are close to each other and
<code class="docutils literal notranslate"><span class="pre">False</span></code> otherwise.</p>
<p>Whether or not two values are considered close is determined according to
given absolute and relative tolerances.  If no errors occur, the result will
be: <code class="docutils literal notranslate"><span class="pre">abs(a-b)</span> <span class="pre">&lt;=</span> <span class="pre">max(rel_tol</span> <span class="pre">*</span> <span class="pre">max(abs(a),</span> <span class="pre">abs(b)),</span> <span class="pre">abs_tol)</span></code>.</p>
<p><em>rel_tol</em> is the relative tolerance – it is the maximum allowed difference
between <em>a</em> and <em>b</em>, relative to the larger absolute value of <em>a</em> or <em>b</em>.
For example, to set a tolerance of 5%, pass <code class="docutils literal notranslate"><span class="pre">rel_tol=0.05</span></code>.  The default
tolerance is <code class="docutils literal notranslate"><span class="pre">1e-09</span></code>, which assures that the two values are the same
within about 9 decimal digits.  <em>rel_tol</em> must be nonnegative and less
than <code class="docutils literal notranslate"><span class="pre">1.0</span></code>.</p>
<p><em>abs_tol</em> is the absolute tolerance; it defaults to <code class="docutils literal notranslate"><span class="pre">0.0</span></code> and it must be
nonnegative.  When comparing <code class="docutils literal notranslate"><span class="pre">x</span></code> to <code class="docutils literal notranslate"><span class="pre">0.0</span></code>, <code class="docutils literal notranslate"><span class="pre">isclose(x,</span> <span class="pre">0)</span></code> is computed
as <code class="docutils literal notranslate"><span class="pre">abs(x)</span> <span class="pre">&lt;=</span> <span class="pre">rel_tol</span>&#160; <span class="pre">*</span> <span class="pre">abs(x)</span></code>, which is <code class="docutils literal notranslate"><span class="pre">False</span></code> for any <code class="docutils literal notranslate"><span class="pre">x</span></code> and
rel_tol less than <code class="docutils literal notranslate"><span class="pre">1.0</span></code>.  So add an appropriate positive abs_tol argument
to the call.</p>
<p>The IEEE 754 special values of <code class="docutils literal notranslate"><span class="pre">NaN</span></code>, <code class="docutils literal notranslate"><span class="pre">inf</span></code>, and <code class="docutils literal notranslate"><span class="pre">-inf</span></code> will be
handled according to IEEE rules.  Specifically, <code class="docutils literal notranslate"><span class="pre">NaN</span></code> is not considered
close to any other value, including <code class="docutils literal notranslate"><span class="pre">NaN</span></code>.  <code class="docutils literal notranslate"><span class="pre">inf</span></code> and <code class="docutils literal notranslate"><span class="pre">-inf</span></code> are only
considered close to themselves.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p><span class="target" id="index-0"></span><a class="pep reference external" href="https://peps.python.org/pep-0485/"><strong>PEP 485</strong></a><span class="link-target"> [https://peps.python.org/pep-0485/]</span> – A function for testing approximate equality</p>
</div>
</dd></dl>

</section>
<section id="constants">
<h2>Constants</h2>
<dl class="py data">
<dt class="sig sig-object py" id="cmath.pi">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">pi</span></span></dt>
<dd><p>The mathematical constant <em>π</em>, as a float.</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="cmath.e">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">e</span></span></dt>
<dd><p>The mathematical constant <em>e</em>, as a float.</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="cmath.tau">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">tau</span></span></dt>
<dd><p>The mathematical constant <em>τ</em>, as a float.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="cmath.inf">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">inf</span></span></dt>
<dd><p>Floating-point positive infinity. Equivalent to <code class="docutils literal notranslate"><span class="pre">float('inf')</span></code>.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="cmath.infj">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">infj</span></span></dt>
<dd><p>Complex number with zero real part and positive infinity imaginary
part. Equivalent to <code class="docutils literal notranslate"><span class="pre">complex(0.0,</span> <span class="pre">float('inf'))</span></code>.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="cmath.nan">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">nan</span></span></dt>
<dd><p>A floating-point “not a number” (NaN) value.  Equivalent to
<code class="docutils literal notranslate"><span class="pre">float('nan')</span></code>.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="cmath.nanj">
<span class="sig-prename descclassname"><span class="pre">cmath.</span></span><span class="sig-name descname"><span class="pre">nanj</span></span></dt>
<dd><p>Complex number with zero real part and NaN imaginary part. Equivalent to
<code class="docutils literal notranslate"><span class="pre">complex(0.0,</span> <span class="pre">float('nan'))</span></code>.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
</dd></dl>

<p id="index-1">Note that the selection of functions is similar, but not identical, to that in
module <a class="reference internal" href="math.xhtml#module-math" title="math: Mathematical functions (sin() etc.)."><code class="xref py py-mod docutils literal notranslate"><span class="pre">math</span></code></a>.  The reason for having two modules is that some users aren’t
interested in complex numbers, and perhaps don’t even know what they are.  They
would rather have <code class="docutils literal notranslate"><span class="pre">math.sqrt(-1)</span></code> raise an exception than return a complex
number. Also note that the functions defined in <a class="reference internal" href="#module-cmath" title="cmath: Mathematical functions for complex numbers."><code class="xref py py-mod docutils literal notranslate"><span class="pre">cmath</span></code></a> always return a
complex number, even if the answer can be expressed as a real number (in which
case the complex number has an imaginary part of zero).</p>
<p>A note on branch cuts: They are curves along which the given function fails to
be continuous.  They are a necessary feature of many complex functions.  It is
assumed that if you need to compute with complex functions, you will understand
about branch cuts.  Consult almost any (not too elementary) book on complex
variables for enlightenment.  For information of the proper choice of branch
cuts for numerical purposes, a good reference should be the following:</p>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p>Kahan, W:  Branch cuts for complex elementary functions; or, Much ado about
nothing’s sign bit.  In Iserles, A., and Powell, M. (eds.), The state of the art
in numerical analysis. Clarendon Press (1987) pp165–211.</p>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>