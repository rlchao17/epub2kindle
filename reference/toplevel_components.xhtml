<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<meta property="og:title" content="9. Top-level components"/>
<meta property="og:type" content="website"/>
<meta property="og:url" content="https://docs.python.org/3/reference/toplevel_components.xhtml"/>
<meta property="og:site_name" content="Python documentation"/>
<meta property="og:description" content="The Python interpreter can get its input from a number of sources: from a script passed to it as standard input or as program argument, typed in interactively, from a module source file, etc. This ..."/>
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png"/>
<meta property="og:image:alt" content="Python documentation"/>
<meta name="description" content="The Python interpreter can get its input from a number of sources: from a script passed to it as standard input or as program argument, typed in interactively, from a module source file, etc. This ..."/>
<meta property="og:image:width" content="200"/>
<meta property="og:image:height" content="200"/>
<meta name="theme-color" content="#3776ab"/>

    <title>9. Top-level components</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css"/>
    <link rel="stylesheet" type="text/css" href="../_static/epub.css"/>
    
    <link rel="canonical" href="https://docs.python.org/3/reference/toplevel_components.html"/>
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head>
<body>
    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="top-level-components">
<span id="top-level"></span><h1><span class="section-number">9. </span>Top-level components</h1>
<p id="index-0">The Python interpreter can get its input from a number of sources: from a script
passed to it as standard input or as program argument, typed in interactively,
from a module source file, etc.  This chapter gives the syntax used in these
cases.</p>
<section id="complete-python-programs">
<span id="programs"></span><h2 class="sigil_not_in_toc"><span class="section-number">9.1. </span>Complete Python programs</h2>
<p id="index-2"><span id="index-1"></span>While a language specification need not prescribe how the language interpreter
is invoked, it is useful to have a notion of a complete Python program.  A
complete Python program is executed in a minimally initialized environment: all
built-in and standard modules are available, but none have been initialized,
except for <a class="reference internal" href="../library/sys.xhtml#module-sys" title="sys: Access system-specific parameters and functions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">sys</span></code></a> (various system services), <a class="reference internal" href="../library/builtins.xhtml#module-builtins" title="builtins: The module that provides the built-in namespace."><code class="xref py py-mod docutils literal notranslate"><span class="pre">builtins</span></code></a> (built-in
functions, exceptions and <code class="docutils literal notranslate"><span class="pre">None</span></code>) and <a class="reference internal" href="../library/__main__.xhtml#module-__main__" title="__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``."><code class="xref py py-mod docutils literal notranslate"><span class="pre">__main__</span></code></a>.  The latter is used to
provide the local and global namespace for execution of the complete program.</p>
<p>The syntax for a complete Python program is that for file input, described in
the next section.</p>
<p id="index-3">The interpreter may also be invoked in interactive mode; in this case, it does
not read and execute a complete program but reads and executes one statement
(possibly compound) at a time.  The initial environment is identical to that of
a complete program; each statement is executed in the namespace of
<a class="reference internal" href="../library/__main__.xhtml#module-__main__" title="__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``."><code class="xref py py-mod docutils literal notranslate"><span class="pre">__main__</span></code></a>.</p>
<p id="index-4">A complete program can be passed to the interpreter
in three forms: with the <a class="reference internal" href="../using/cmdline.xhtml#cmdoption-c"><code class="xref std std-option docutils literal notranslate"><span class="pre">-c</span></code></a> <em>string</em> command line option, as a file
passed as the first command line argument, or as standard input.  If the file
or standard input is a tty device, the interpreter enters interactive mode;
otherwise, it executes the file as a complete program.</p>
</section>
<section id="file-input">
<span id="id1"></span><h2 class="sigil_not_in_toc"><span class="section-number">9.2. </span>File input</h2>
<p>All input read from non-interactive files has the same form:</p>
<pre><strong id="grammar-token-python-grammar-file_input">file_input</strong> ::=  (NEWLINE | <a class="reference internal" href="compound_stmts.xhtml#grammar-token-python-grammar-statement"><code class="xref docutils literal notranslate"><span class="pre">statement</span></code></a>)*
</pre>
<p>This syntax is used in the following situations:</p>
<ul class="simple">
<li><p>when parsing a complete Python program (from a file or from a string);</p></li>
<li><p>when parsing a module;</p></li>
<li><p>when parsing a string passed to the <a class="reference internal" href="../library/functions.xhtml#exec" title="exec"><code class="xref py py-func docutils literal notranslate"><span class="pre">exec()</span></code></a> function;</p></li>
</ul>
</section>
<section id="interactive-input">
<span id="interactive"></span><h2 class="sigil_not_in_toc"><span class="section-number">9.3. </span>Interactive input</h2>
<p>Input in interactive mode is parsed using the following grammar:</p>
<pre><strong id="grammar-token-python-grammar-interactive_input">interactive_input</strong> ::=  [<a class="reference internal" href="compound_stmts.xhtml#grammar-token-python-grammar-stmt_list"><code class="xref docutils literal notranslate"><span class="pre">stmt_list</span></code></a>] NEWLINE | <a class="reference internal" href="compound_stmts.xhtml#grammar-token-python-grammar-compound_stmt"><code class="xref docutils literal notranslate"><span class="pre">compound_stmt</span></code></a> NEWLINE
</pre>
<p>Note that a (top-level) compound statement must be followed by a blank line in
interactive mode; this is needed to help the parser detect the end of the input.</p>
</section>
<section id="expression-input">
<span id="id2"></span><h2 class="sigil_not_in_toc"><span class="section-number">9.4. </span>Expression input</h2>
<p id="index-6"><span id="index-5"></span><a class="reference internal" href="../library/functions.xhtml#eval" title="eval"><code class="xref py py-func docutils literal notranslate"><span class="pre">eval()</span></code></a> is used for expression input.  It ignores leading whitespace. The
string argument to <a class="reference internal" href="../library/functions.xhtml#eval" title="eval"><code class="xref py py-func docutils literal notranslate"><span class="pre">eval()</span></code></a> must have the following form:</p>
<pre><strong id="grammar-token-python-grammar-eval_input">eval_input</strong> ::=  <a class="reference internal" href="expressions.xhtml#grammar-token-python-grammar-expression_list"><code class="xref docutils literal notranslate"><span class="pre">expression_list</span></code></a> NEWLINE*
</pre>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
</body>
</html>