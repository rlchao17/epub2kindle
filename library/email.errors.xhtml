<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="email.errors: Exception and Defect classes" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/email.errors.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="Source code: Lib/email/errors.py[https://github.com/python/cpython/tree/3.13/Lib/email/errors.py] The following exception classes are defined in the email.errors module: Here is the list of the def..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="Source code: Lib/email/errors.py[https://github.com/python/cpython/tree/3.13/Lib/email/errors.py] The following exception classes are defined in the email.errors module: Here is the list of the def..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>email.errors: Exception and Defect classes</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    
    <link rel="canonical" href="https://docs.python.org/3/library/email.errors.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-email.errors">
<span id="email-errors-exception-and-defect-classes"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.errors</span></code>: Exception and Defect classes</h1>
<p><strong>Source code:</strong> <a class="extlink-source reference external" href="https://github.com/python/cpython/tree/3.13/Lib/email/errors.py">Lib/email/errors.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.13/Lib/email/errors.py]</span></p>
<hr class="docutils" />
<p>The following exception classes are defined in the <a class="reference internal" href="#module-email.errors" title="email.errors: The exception classes used by the email package."><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.errors</span></code></a> module:</p>
<dl class="py exception">
<dt class="sig sig-object py" id="email.errors.MessageError">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.errors.</span></span><span class="sig-name descname"><span class="pre">MessageError</span></span></dt>
<dd><p>This is the base class for all exceptions that the <a class="reference internal" href="email.xhtml#module-email" title="email: Package supporting the parsing, manipulating, and generating email messages."><code class="xref py py-mod docutils literal notranslate"><span class="pre">email</span></code></a> package can
raise.  It is derived from the standard <a class="reference internal" href="exceptions.xhtml#Exception" title="Exception"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Exception</span></code></a> class and defines no
additional methods.</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="email.errors.MessageParseError">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.errors.</span></span><span class="sig-name descname"><span class="pre">MessageParseError</span></span></dt>
<dd><p>This is the base class for exceptions raised by the
<a class="reference internal" href="email.parser.xhtml#email.parser.Parser" title="email.parser.Parser"><code class="xref py py-class docutils literal notranslate"><span class="pre">Parser</span></code></a> class.  It is derived from
<a class="reference internal" href="#email.errors.MessageError" title="email.errors.MessageError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">MessageError</span></code></a>.  This class is also used internally by the parser used
by <a class="reference internal" href="email.headerregistry.xhtml#module-email.headerregistry" title="email.headerregistry: Automatic Parsing of headers based on the field name"><code class="xref py py-mod docutils literal notranslate"><span class="pre">headerregistry</span></code></a>.</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="email.errors.HeaderParseError">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.errors.</span></span><span class="sig-name descname"><span class="pre">HeaderParseError</span></span></dt>
<dd><p>Raised under some error conditions when parsing the <span class="target" id="index-0"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc5322.html"><strong>RFC 5322</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc5322.html]</span> headers of a
message, this class is derived from <a class="reference internal" href="#email.errors.MessageParseError" title="email.errors.MessageParseError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">MessageParseError</span></code></a>.  The
<a class="reference internal" href="email.message.xhtml#email.message.EmailMessage.set_boundary" title="email.message.EmailMessage.set_boundary"><code class="xref py py-meth docutils literal notranslate"><span class="pre">set_boundary()</span></code></a> method will raise this
error if the content type is unknown when the method is called.
<a class="reference internal" href="email.header.xhtml#email.header.Header" title="email.header.Header"><code class="xref py py-class docutils literal notranslate"><span class="pre">Header</span></code></a> may raise this error for certain base64
decoding errors, and when an attempt is made to create a header that appears
to contain an embedded header (that is, there is what is supposed to be a
continuation line that has no leading whitespace and looks like a header).</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="email.errors.BoundaryError">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.errors.</span></span><span class="sig-name descname"><span class="pre">BoundaryError</span></span></dt>
<dd><p>Deprecated and no longer used.</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="email.errors.MultipartConversionError">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.errors.</span></span><span class="sig-name descname"><span class="pre">MultipartConversionError</span></span></dt>
<dd><p>Raised when a payload is added to a <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message" title="email.message.Message"><code class="xref py py-class docutils literal notranslate"><span class="pre">Message</span></code></a> object
using <code class="xref py py-meth docutils literal notranslate"><span class="pre">add_payload()</span></code>, but the payload is already a scalar and the
message’s <em class="mailheader">Content-Type</em> main type is not either
<em class="mimetype">multipart</em> or missing.  <a class="reference internal" href="#email.errors.MultipartConversionError" title="email.errors.MultipartConversionError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">MultipartConversionError</span></code></a> multiply
inherits from <a class="reference internal" href="#email.errors.MessageError" title="email.errors.MessageError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">MessageError</span></code></a> and the built-in <a class="reference internal" href="exceptions.xhtml#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>.</p>
<p>Since <code class="xref py py-meth docutils literal notranslate"><span class="pre">Message.add_payload()</span></code> is deprecated, this exception is rarely
raised in practice.  However the exception may also be raised if the
<a class="reference internal" href="email.compat32-message.xhtml#email.message.Message.attach" title="email.message.Message.attach"><code class="xref py py-meth docutils literal notranslate"><span class="pre">attach()</span></code></a>
method is called on an instance of a class derived from
<a class="reference internal" href="email.mime.xhtml#email.mime.nonmultipart.MIMENonMultipart" title="email.mime.nonmultipart.MIMENonMultipart"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMENonMultipart</span></code></a> (e.g.
<a class="reference internal" href="email.mime.xhtml#email.mime.image.MIMEImage" title="email.mime.image.MIMEImage"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEImage</span></code></a>).</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="email.errors.HeaderWriteError">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.errors.</span></span><span class="sig-name descname"><span class="pre">HeaderWriteError</span></span></dt>
<dd><p>Raised when an error occurs when the <a class="reference internal" href="email.generator.xhtml#module-email.generator" title="email.generator: Generate flat text email messages from a message structure."><code class="xref py py-mod docutils literal notranslate"><span class="pre">generator</span></code></a> outputs
headers.</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="email.errors.MessageDefect">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.errors.</span></span><span class="sig-name descname"><span class="pre">MessageDefect</span></span></dt>
<dd><p>This is the base class for all defects found when parsing email messages.
It is derived from <a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>.</p>
</dd></dl>

<dl class="py exception">
<dt class="sig sig-object py" id="email.errors.HeaderDefect">
<em class="property"><span class="pre">exception</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.errors.</span></span><span class="sig-name descname"><span class="pre">HeaderDefect</span></span></dt>
<dd><p>This is the base class for all defects found when parsing email headers.
It is derived from <a class="reference internal" href="#email.errors.MessageDefect" title="email.errors.MessageDefect"><code class="xref py py-exc docutils literal notranslate"><span class="pre">MessageDefect</span></code></a>.</p>
</dd></dl>

<p>Here is the list of the defects that the <a class="reference internal" href="email.parser.xhtml#email.parser.FeedParser" title="email.parser.FeedParser"><code class="xref py py-class docutils literal notranslate"><span class="pre">FeedParser</span></code></a>
can find while parsing messages.  Note that the defects are added to the message
where the problem was found, so for example, if a message nested inside a
<em class="mimetype">multipart/alternative</em> had a malformed header, that nested message
object would have a defect, but the containing messages would not.</p>
<p>All defect classes are subclassed from <a class="reference internal" href="#email.errors.MessageDefect" title="email.errors.MessageDefect"><code class="xref py py-class docutils literal notranslate"><span class="pre">email.errors.MessageDefect</span></code></a>.</p>
<ul>
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">NoBoundaryInMultipartDefect</span></code> – A message claimed to be a multipart,
but had no <em class="mimetype">boundary</em> parameter.</p></li>
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">StartBoundaryNotFoundDefect</span></code> – The start boundary claimed in the
<em class="mailheader">Content-Type</em> header was never found.</p></li>
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">CloseBoundaryNotFoundDefect</span></code> – A start boundary was found, but
no corresponding close boundary was ever found.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</li>
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">FirstHeaderLineIsContinuationDefect</span></code> – The message had a continuation
line as its first header line.</p></li>
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">MisplacedEnvelopeHeaderDefect</span></code> - A “Unix From” header was found in the
middle of a header block.</p></li>
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">MissingHeaderBodySeparatorDefect</span></code> - A line was found while parsing
headers that had no leading white space but contained no ‘:’.  Parsing
continues assuming that the line represents the first line of the body.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.3.</span></p>
</div>
</li>
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">MalformedHeaderDefect</span></code> – A header was found that was missing a colon,
or was otherwise malformed.</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">Deprecated since version 3.3: </span>This defect has not been used for several Python versions.</p>
</div>
</li>
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">MultipartInvariantViolationDefect</span></code> – A message claimed to be a
<em class="mimetype">multipart</em>, but no subparts were found.  Note that when a message
has this defect, its <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message.is_multipart" title="email.message.Message.is_multipart"><code class="xref py py-meth docutils literal notranslate"><span class="pre">is_multipart()</span></code></a> method may
return <code class="docutils literal notranslate"><span class="pre">False</span></code> even though its content type claims to be <em class="mimetype">multipart</em>.</p></li>
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">InvalidBase64PaddingDefect</span></code> – When decoding a block of base64
encoded bytes, the padding was not correct.  Enough padding is added to
perform the decode, but the resulting decoded bytes may be invalid.</p></li>
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">InvalidBase64CharactersDefect</span></code> – When decoding a block of base64
encoded bytes, characters outside the base64 alphabet were encountered.
The characters are ignored, but the resulting decoded bytes may be invalid.</p></li>
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">InvalidBase64LengthDefect</span></code> – When decoding a block of base64 encoded
bytes, the number of non-padding base64 characters was invalid (1 more than
a multiple of 4).  The encoded block was kept as-is.</p></li>
<li><p><code class="xref py py-class docutils literal notranslate"><span class="pre">InvalidDateDefect</span></code> – When decoding an invalid or unparsable date field.
The original value is kept as-is.</p></li>
</ul>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>