<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<meta property="og:title" content="Policies"/>
<meta property="og:type" content="website"/>
<meta property="og:url" content="https://docs.python.org/3/library/asyncio-policy.xhtml"/>
<meta property="og:site_name" content="Python documentation"/>
<meta property="og:description" content="An event loop policy is a global object used to get and set the current event loop, as well as create new event loops. The default policy can be replaced with built-in alternatives to use different..."/>
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png"/>
<meta property="og:image:alt" content="Python documentation"/>
<meta name="description" content="An event loop policy is a global object used to get and set the current event loop, as well as create new event loops. The default policy can be replaced with built-in alternatives to use different..."/>
<meta property="og:image:width" content="200"/>
<meta property="og:image:height" content="200"/>
<meta name="theme-color" content="#3776ab"/>

    <title>Policies</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css"/>
    <link rel="stylesheet" type="text/css" href="../_static/epub.css"/>
    
    <link rel="canonical" href="https://docs.python.org/3/library/asyncio-policy.html"/>
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head>
<body>
    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="policies">
<span id="asyncio-policies"></span><h1>Policies</h1>
<p>An event loop policy is a global object
used to get and set the current <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio-event-loop"><span class="std std-ref">event loop</span></a>,
as well as create new event loops.
The default policy can be <a class="reference internal" href="#asyncio-policy-get-set"><span class="std std-ref">replaced</span></a> with
<a class="reference internal" href="#asyncio-policy-builtin"><span class="std std-ref">built-in alternatives</span></a>
to use different event loop implementations,
or substituted by a <a class="reference internal" href="#asyncio-custom-policies"><span class="std std-ref">custom policy</span></a>
that can override these behaviors.</p>
<p>The <a class="reference internal" href="#asyncio-policy-objects"><span class="std std-ref">policy object</span></a>
gets and sets a separate event loop per <em>context</em>.
This is per-thread by default,
though custom policies could define <em>context</em> differently.</p>
<p>Custom event loop policies can control the behavior of
<a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.get_event_loop" title="asyncio.get_event_loop"><code class="xref py py-func docutils literal notranslate"><span class="pre">get_event_loop()</span></code></a>, <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.set_event_loop" title="asyncio.set_event_loop"><code class="xref py py-func docutils literal notranslate"><span class="pre">set_event_loop()</span></code></a>, and <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.new_event_loop" title="asyncio.new_event_loop"><code class="xref py py-func docutils literal notranslate"><span class="pre">new_event_loop()</span></code></a>.</p>
<p>Policy objects should implement the APIs defined
in the <a class="reference internal" href="#asyncio.AbstractEventLoopPolicy" title="asyncio.AbstractEventLoopPolicy"><code class="xref py py-class docutils literal notranslate"><span class="pre">AbstractEventLoopPolicy</span></code></a> abstract base class.</p>
<section id="getting-and-setting-the-policy">
<span id="asyncio-policy-get-set"></span><h2 class="sigil_not_in_toc">Getting and Setting the Policy</h2>
<p>The following functions can be used to get and set the policy
for the current process:</p>
<dl class="py function">
<dt class="sig sig-object py" id="asyncio.get_event_loop_policy">
<span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">get_event_loop_policy</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the current process-wide policy.</p>
</dd>
</dl>

<dl class="py function">
<dt class="sig sig-object py" id="asyncio.set_event_loop_policy">
<span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">set_event_loop_policy</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">policy</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the current process-wide policy to <em>policy</em>.</p>
<p>If <em>policy</em> is set to <code class="docutils literal notranslate"><span class="pre">None</span></code>, the default policy is restored.</p>
</dd>
</dl>

</section>
<section id="policy-objects">
<span id="asyncio-policy-objects"></span><h2 class="sigil_not_in_toc">Policy Objects</h2>
<p>The abstract event loop policy base class is defined as follows:</p>
<dl class="py class">
<dt class="sig sig-object py" id="asyncio.AbstractEventLoopPolicy">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">AbstractEventLoopPolicy</span></span></dt>
<dd><p>An abstract base class for asyncio policies.</p>
<dl class="py method">
<dt class="sig sig-object py" id="asyncio.AbstractEventLoopPolicy.get_event_loop">
<span class="sig-name descname"><span class="pre">get_event_loop</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Get the event loop for the current context.</p>
<p>Return an event loop object implementing the
<a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.AbstractEventLoop" title="asyncio.AbstractEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">AbstractEventLoop</span></code></a> interface.</p>
<p>This method should never return <code class="docutils literal notranslate"><span class="pre">None</span></code>.</p>
<div class="versionchanged">
<p><span class="versionmodified changed">Changed in version 3.6.</span></p>
</div>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.AbstractEventLoopPolicy.set_event_loop">
<span class="sig-name descname"><span class="pre">set_event_loop</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">loop</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the event loop for the current context to <em>loop</em>.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.AbstractEventLoopPolicy.new_event_loop">
<span class="sig-name descname"><span class="pre">new_event_loop</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Create and return a new event loop object.</p>
<p>This method should never return <code class="docutils literal notranslate"><span class="pre">None</span></code>.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.AbstractEventLoopPolicy.get_child_watcher">
<span class="sig-name descname"><span class="pre">get_child_watcher</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Get a child process watcher object.</p>
<p>Return a watcher object implementing the
<a class="reference internal" href="#asyncio.AbstractChildWatcher" title="asyncio.AbstractChildWatcher"><code class="xref py py-class docutils literal notranslate"><span class="pre">AbstractChildWatcher</span></code></a> interface.</p>
<p>This function is Unix specific.</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">Deprecated since version 3.12.</span></p>
</div>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.AbstractEventLoopPolicy.set_child_watcher">
<span class="sig-name descname"><span class="pre">set_child_watcher</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">watcher</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the current child process watcher to <em>watcher</em>.</p>
<p>This function is Unix specific.</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">Deprecated since version 3.12.</span></p>
</div>
</dd>
</dl>

</dd>
</dl>

<p id="asyncio-policy-builtin">asyncio ships with the following built-in policies:</p>
<dl class="py class">
<dt class="sig sig-object py" id="asyncio.DefaultEventLoopPolicy">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">DefaultEventLoopPolicy</span></span></dt>
<dd><p>The default asyncio policy.  Uses <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.SelectorEventLoop" title="asyncio.SelectorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorEventLoop</span></code></a>
on Unix and <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.ProactorEventLoop" title="asyncio.ProactorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">ProactorEventLoop</span></code></a> on Windows.</p>
<p>There is no need to install the default policy manually. asyncio
is configured to use the default policy automatically.</p>
<div class="versionchanged">
<p><span class="versionmodified changed">Changed in version 3.8: </span>On Windows, <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.ProactorEventLoop" title="asyncio.ProactorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">ProactorEventLoop</span></code></a> is now used by default.</p>
</div>
<div class="deprecated">
<p><span class="versionmodified deprecated">Deprecated since version 3.12: </span>The <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.get_event_loop" title="asyncio.get_event_loop"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_event_loop()</span></code></a> method of the default asyncio policy now emits
a <a class="reference internal" href="exceptions.xhtml#DeprecationWarning" title="DeprecationWarning"><code class="xref py py-exc docutils literal notranslate"><span class="pre">DeprecationWarning</span></code></a> if there is no current event loop set and it
decides to create one.
In some future Python release this will become an error.</p>
</div>
</dd>
</dl>

<dl class="py class">
<dt class="sig sig-object py" id="asyncio.WindowsSelectorEventLoopPolicy">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">WindowsSelectorEventLoopPolicy</span></span></dt>
<dd><p>An alternative event loop policy that uses the
<a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.SelectorEventLoop" title="asyncio.SelectorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">SelectorEventLoop</span></code></a> event loop implementation.</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">Availability</span></a>: Windows.</p>
</div>
</dd>
</dl>

<dl class="py class">
<dt class="sig sig-object py" id="asyncio.WindowsProactorEventLoopPolicy">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">WindowsProactorEventLoopPolicy</span></span></dt>
<dd><p>An alternative event loop policy that uses the
<a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.ProactorEventLoop" title="asyncio.ProactorEventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">ProactorEventLoop</span></code></a> event loop implementation.</p>
<div class="availability docutils container">
<p><a class="reference internal" href="intro.xhtml#availability"><span class="std std-ref">Availability</span></a>: Windows.</p>
</div>
</dd>
</dl>

</section>
<section id="process-watchers">
<span id="asyncio-watchers"></span><h2 class="sigil_not_in_toc">Process Watchers</h2>
<p>A process watcher allows customization of how an event loop monitors
child processes on Unix. Specifically, the event loop needs to know
when a child process has exited.</p>
<p>In asyncio, child processes are created with
<a class="reference internal" href="asyncio-subprocess.xhtml#asyncio.create_subprocess_exec" title="asyncio.create_subprocess_exec"><code class="xref py py-func docutils literal notranslate"><span class="pre">create_subprocess_exec()</span></code></a> and <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.subprocess_exec" title="asyncio.loop.subprocess_exec"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.subprocess_exec()</span></code></a>
functions.</p>
<p>asyncio defines the <a class="reference internal" href="#asyncio.AbstractChildWatcher" title="asyncio.AbstractChildWatcher"><code class="xref py py-class docutils literal notranslate"><span class="pre">AbstractChildWatcher</span></code></a> abstract base class, which child
watchers should implement, and has four different implementations:
<a class="reference internal" href="#asyncio.ThreadedChildWatcher" title="asyncio.ThreadedChildWatcher"><code class="xref py py-class docutils literal notranslate"><span class="pre">ThreadedChildWatcher</span></code></a> (configured to be used by default),
<a class="reference internal" href="#asyncio.MultiLoopChildWatcher" title="asyncio.MultiLoopChildWatcher"><code class="xref py py-class docutils literal notranslate"><span class="pre">MultiLoopChildWatcher</span></code></a>, <a class="reference internal" href="#asyncio.SafeChildWatcher" title="asyncio.SafeChildWatcher"><code class="xref py py-class docutils literal notranslate"><span class="pre">SafeChildWatcher</span></code></a>, and
<a class="reference internal" href="#asyncio.FastChildWatcher" title="asyncio.FastChildWatcher"><code class="xref py py-class docutils literal notranslate"><span class="pre">FastChildWatcher</span></code></a>.</p>
<p>See also the <a class="reference internal" href="asyncio-subprocess.xhtml#asyncio-subprocess-threads"><span class="std std-ref">Subprocess and Threads</span></a>
section.</p>
<p>The following two functions can be used to customize the child process watcher
implementation used by the asyncio event loop:</p>
<dl class="py function">
<dt class="sig sig-object py" id="asyncio.get_child_watcher">
<span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">get_child_watcher</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the current child watcher for the current policy.</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">Deprecated since version 3.12.</span></p>
</div>
</dd>
</dl>

<dl class="py function">
<dt class="sig sig-object py" id="asyncio.set_child_watcher">
<span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">set_child_watcher</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">watcher</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Set the current child watcher to <em>watcher</em> for the current
policy.  <em>watcher</em> must implement methods defined in the
<a class="reference internal" href="#asyncio.AbstractChildWatcher" title="asyncio.AbstractChildWatcher"><code class="xref py py-class docutils literal notranslate"><span class="pre">AbstractChildWatcher</span></code></a> base class.</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">Deprecated since version 3.12.</span></p>
</div>
</dd>
</dl>

<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Third-party event loops implementations might not support
custom child watchers.  For such event loops, using
<a class="reference internal" href="#asyncio.set_child_watcher" title="asyncio.set_child_watcher"><code class="xref py py-func docutils literal notranslate"><span class="pre">set_child_watcher()</span></code></a> might be prohibited or have no effect.</p>
</div>
<dl class="py class">
<dt class="sig sig-object py" id="asyncio.AbstractChildWatcher">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">AbstractChildWatcher</span></span></dt>
<dd><dl class="py method">
<dt class="sig sig-object py" id="asyncio.AbstractChildWatcher.add_child_handler">
<span class="sig-name descname"><span class="pre">add_child_handler</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">callback</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Register a new child handler.</p>
<p>Arrange for <code class="docutils literal notranslate"><span class="pre">callback(pid,</span> <span class="pre">returncode,</span> <span class="pre">*args)</span></code> to be called
when a process with PID equal to <em>pid</em> terminates.  Specifying
another callback for the same process replaces the previous
handler.</p>
<p>The <em>callback</em> callable must be thread-safe.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.AbstractChildWatcher.remove_child_handler">
<span class="sig-name descname"><span class="pre">remove_child_handler</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">pid</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Removes the handler for process with PID equal to <em>pid</em>.</p>
<p>The function returns <code class="docutils literal notranslate"><span class="pre">True</span></code> if the handler was successfully
removed, <code class="docutils literal notranslate"><span class="pre">False</span></code> if there was nothing to remove.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.AbstractChildWatcher.attach_loop">
<span class="sig-name descname"><span class="pre">attach_loop</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">loop</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Attach the watcher to an event loop.</p>
<p>If the watcher was previously attached to an event loop, then
it is first detached before attaching to the new loop.</p>
<p>Note: loop may be <code class="docutils literal notranslate"><span class="pre">None</span></code>.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.AbstractChildWatcher.is_active">
<span class="sig-name descname"><span class="pre">is_active</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return <code class="docutils literal notranslate"><span class="pre">True</span></code> if the watcher is ready to use.</p>
<p>Spawning a subprocess with <em>inactive</em> current child watcher raises
<a class="reference internal" href="exceptions.xhtml#RuntimeError" title="RuntimeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">RuntimeError</span></code></a>.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.AbstractChildWatcher.close">
<span class="sig-name descname"><span class="pre">close</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Close the watcher.</p>
<p>This method has to be called to ensure that underlying
resources are cleaned-up.</p>
</dd>
</dl>

<div class="deprecated">
<p><span class="versionmodified deprecated">Deprecated since version 3.12.</span></p>
</div>
</dd>
</dl>

<dl class="py class">
<dt class="sig sig-object py" id="asyncio.ThreadedChildWatcher">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">ThreadedChildWatcher</span></span></dt>
<dd><p>This implementation starts a new waiting thread for every subprocess spawn.</p>
<p>It works reliably even when the asyncio event loop is run in a non-main OS thread.</p>
<p>There is no noticeable overhead when handling a big number of children (<em>O</em>(1) each
time a child terminates), but starting a thread per process requires extra memory.</p>
<p>This watcher is used by default.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
</dd>
</dl>

<dl class="py class">
<dt class="sig sig-object py" id="asyncio.MultiLoopChildWatcher">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">MultiLoopChildWatcher</span></span></dt>
<dd><p>This implementation registers a <code class="xref py py-data docutils literal notranslate"><span class="pre">SIGCHLD</span></code> signal handler on
instantiation. That can break third-party code that installs a custom handler for
<code class="xref py py-data docutils literal notranslate"><span class="pre">SIGCHLD</span></code> signal.</p>
<p>The watcher avoids disrupting other code spawning processes
by polling every process explicitly on a <code class="xref py py-data docutils literal notranslate"><span class="pre">SIGCHLD</span></code> signal.</p>
<p>There is no limitation for running subprocesses from different threads once the
watcher is installed.</p>
<p>The solution is safe but it has a significant overhead when
handling a big number of processes (<em>O</em>(<em>n</em>) each time a
<code class="xref py py-data docutils literal notranslate"><span class="pre">SIGCHLD</span></code> is received).</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.8.</span></p>
</div>
<div class="deprecated">
<p><span class="versionmodified deprecated">Deprecated since version 3.12.</span></p>
</div>
</dd>
</dl>

<dl class="py class">
<dt class="sig sig-object py" id="asyncio.SafeChildWatcher">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">SafeChildWatcher</span></span></dt>
<dd><p>This implementation uses active event loop from the main thread to handle
<code class="xref py py-data docutils literal notranslate"><span class="pre">SIGCHLD</span></code> signal. If the main thread has no running event loop another
thread cannot spawn a subprocess (<a class="reference internal" href="exceptions.xhtml#RuntimeError" title="RuntimeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">RuntimeError</span></code></a> is raised).</p>
<p>The watcher avoids disrupting other code spawning processes
by polling every process explicitly on a <code class="xref py py-data docutils literal notranslate"><span class="pre">SIGCHLD</span></code> signal.</p>
<p>This solution is as safe as <a class="reference internal" href="#asyncio.MultiLoopChildWatcher" title="asyncio.MultiLoopChildWatcher"><code class="xref py py-class docutils literal notranslate"><span class="pre">MultiLoopChildWatcher</span></code></a> and has the same <em>O</em>(<em>n</em>)
complexity but requires a running event loop in the main thread to work.</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">Deprecated since version 3.12.</span></p>
</div>
</dd>
</dl>

<dl class="py class">
<dt class="sig sig-object py" id="asyncio.FastChildWatcher">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">FastChildWatcher</span></span></dt>
<dd><p>This implementation reaps every terminated processes by calling
<code class="docutils literal notranslate"><span class="pre">os.waitpid(-1)</span></code> directly, possibly breaking other code spawning
processes and waiting for their termination.</p>
<p>There is no noticeable overhead when handling a big number of
children (<em>O</em>(1) each time a child terminates).</p>
<p>This solution requires a running event loop in the main thread to work, as
<a class="reference internal" href="#asyncio.SafeChildWatcher" title="asyncio.SafeChildWatcher"><code class="xref py py-class docutils literal notranslate"><span class="pre">SafeChildWatcher</span></code></a>.</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">Deprecated since version 3.12.</span></p>
</div>
</dd>
</dl>

<dl class="py class">
<dt class="sig sig-object py" id="asyncio.PidfdChildWatcher">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">PidfdChildWatcher</span></span></dt>
<dd><p>This implementation polls process file descriptors (pidfds) to await child
process termination. In some respects, <a class="reference internal" href="#asyncio.PidfdChildWatcher" title="asyncio.PidfdChildWatcher"><code class="xref py py-class docutils literal notranslate"><span class="pre">PidfdChildWatcher</span></code></a> is a
“Goldilocks” child watcher implementation. It doesn’t require signals or
threads, doesn’t interfere with any processes launched outside the event
loop, and scales linearly with the number of subprocesses launched by the
event loop. The main disadvantage is that pidfds are specific to Linux, and
only work on recent (5.3+) kernels.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.9.</span></p>
</div>
</dd>
</dl>

</section>
<section id="custom-policies">
<span id="asyncio-custom-policies"></span><h2 class="sigil_not_in_toc">Custom Policies</h2>
<p>To implement a new event loop policy, it is recommended to subclass
<a class="reference internal" href="#asyncio.DefaultEventLoopPolicy" title="asyncio.DefaultEventLoopPolicy"><code class="xref py py-class docutils literal notranslate"><span class="pre">DefaultEventLoopPolicy</span></code></a> and override the methods for which
custom behavior is wanted, e.g.:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span><span class="w"> </span><span class="nc">MyEventLoopPolicy</span><span class="p">(</span><span class="n">asyncio</span><span class="o">.</span><span class="n">DefaultEventLoopPolicy</span><span class="p">):</span>

    <span class="k">def</span><span class="w"> </span><span class="nf">get_event_loop</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="w">        </span><span class="sd">"""Get the event loop.</span>

<span class="sd">        This may be None or an instance of EventLoop.</span>
<span class="sd">        """</span>
        <span class="n">loop</span> <span class="o">=</span> <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">get_event_loop</span><span class="p">()</span>
        <span class="c1"># Do something with loop ...</span>
        <span class="k">return</span> <span class="n">loop</span>

<span class="n">asyncio</span><span class="o">.</span><span class="n">set_event_loop_policy</span><span class="p">(</span><span class="n">MyEventLoopPolicy</span><span class="p">())</span>
</pre>
</div>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
</body>
</html>