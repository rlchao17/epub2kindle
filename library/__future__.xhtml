<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<meta property="og:title" content="__future__ — Future statement definitions"/>
<meta property="og:type" content="website"/>
<meta property="og:url" content="https://docs.python.org/3/library/__future__.xhtml"/>
<meta property="og:site_name" content="Python documentation"/>
<meta property="og:description" content="Source code: Lib/__future__.py[https://github.com/python/cpython/tree/3.13/Lib/__future__.py] Imports of the form from __future__ import feature are called future statements. These are special-case..."/>
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png"/>
<meta property="og:image:alt" content="Python documentation"/>
<meta name="description" content="Source code: Lib/__future__.py[https://github.com/python/cpython/tree/3.13/Lib/__future__.py] Imports of the form from __future__ import feature are called future statements. These are special-case..."/>
<meta property="og:image:width" content="200"/>
<meta property="og:image:height" content="200"/>
<meta name="theme-color" content="#3776ab"/>

    <title>__future__ — Future statement definitions</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css"/>
    <link rel="stylesheet" type="text/css" href="../_static/epub.css"/>
    
    <link rel="canonical" href="https://docs.python.org/3/library/__future__.html"/>
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head>
<body>
    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-__future__">
<span id="future-future-statement-definitions"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">__future__</span></code> — Future statement definitions</h1>
<p><strong>Source code:</strong> <a class="extlink-source reference external" href="https://github.com/python/cpython/tree/3.13/Lib/__future__.py">Lib/__future__.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.13/Lib/__future__.py]</span></p>
<hr class="docutils"/>
<p>Imports of the form <code class="docutils literal notranslate"><span class="pre">from</span> <span class="pre">__future__</span> <span class="pre">import</span> <span class="pre">feature</span></code> are called
<a class="reference internal" href="../reference/simple_stmts.xhtml#future"><span class="std std-ref">future statements</span></a>. These are special-cased by the Python compiler
to allow the use of new Python features in modules containing the future statement
before the release in which the feature becomes standard.</p>
<p>While these future statements are given additional special meaning by the
Python compiler, they are still executed like any other import statement and
the <a class="reference internal" href="#module-__future__" title="__future__: Future statement definitions"><code class="xref py py-mod docutils literal notranslate"><span class="pre">__future__</span></code></a> exists and is handled by the import system the same way
any other Python module would be. This design serves three purposes:</p>
<ul class="simple">
<li><p>To avoid confusing existing tools that analyze import statements and expect to
find the modules they’re importing.</p></li>
<li><p>To document when incompatible changes were introduced, and when they will be
— or were — made mandatory.  This is a form of executable documentation, and
can be inspected programmatically via importing <a class="reference internal" href="#module-__future__" title="__future__: Future statement definitions"><code class="xref py py-mod docutils literal notranslate"><span class="pre">__future__</span></code></a> and examining
its contents.</p></li>
<li><p>To ensure that <a class="reference internal" href="../reference/simple_stmts.xhtml#future"><span class="std std-ref">future statements</span></a> run under releases prior to
Python 2.1 at least yield runtime exceptions (the import of <a class="reference internal" href="#module-__future__" title="__future__: Future statement definitions"><code class="xref py py-mod docutils literal notranslate"><span class="pre">__future__</span></code></a>
will fail, because there was no module of that name prior to 2.1).</p></li>
</ul>
<section id="module-contents">
<h2 class="sigil_not_in_toc">Module Contents</h2>
<p>No feature description will ever be deleted from <a class="reference internal" href="#module-__future__" title="__future__: Future statement definitions"><code class="xref py py-mod docutils literal notranslate"><span class="pre">__future__</span></code></a>. Since its
introduction in Python 2.1 the following features have found their way into the
language using this mechanism:</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>feature</p>
</th>
<th class="head"><p>optional in</p>
</th>
<th class="head"><p>mandatory in</p>
</th>
<th class="head"><p>effect</p>
</th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>nested_scopes</p>
</td>
<td><p>2.1.0b1</p>
</td>
<td><p>2.2</p>
</td>
<td><p><span class="target" id="index-0"></span><a class="pep reference external" href="https://peps.python.org/pep-0227/"><strong>PEP 227</strong></a><span class="link-target"> [https://peps.python.org/pep-0227/]</span>:
<em>Statically Nested Scopes</em></p>
</td>
</tr>
<tr class="row-odd"><td><p>generators</p>
</td>
<td><p>2.2.0a1</p>
</td>
<td><p>2.3</p>
</td>
<td><p><span class="target" id="index-1"></span><a class="pep reference external" href="https://peps.python.org/pep-0255/"><strong>PEP 255</strong></a><span class="link-target"> [https://peps.python.org/pep-0255/]</span>:
<em>Simple Generators</em></p>
</td>
</tr>
<tr class="row-even"><td><p>division</p>
</td>
<td><p>2.2.0a2</p>
</td>
<td><p>3.0</p>
</td>
<td><p><span class="target" id="index-2"></span><a class="pep reference external" href="https://peps.python.org/pep-0238/"><strong>PEP 238</strong></a><span class="link-target"> [https://peps.python.org/pep-0238/]</span>:
<em>Changing the Division Operator</em></p>
</td>
</tr>
<tr class="row-odd"><td><p>absolute_import</p>
</td>
<td><p>2.5.0a1</p>
</td>
<td><p>3.0</p>
</td>
<td><p><span class="target" id="index-3"></span><a class="pep reference external" href="https://peps.python.org/pep-0328/"><strong>PEP 328</strong></a><span class="link-target"> [https://peps.python.org/pep-0328/]</span>:
<em>Imports: Multi-Line and Absolute/Relative</em></p>
</td>
</tr>
<tr class="row-even"><td><p>with_statement</p>
</td>
<td><p>2.5.0a1</p>
</td>
<td><p>2.6</p>
</td>
<td><p><span class="target" id="index-4"></span><a class="pep reference external" href="https://peps.python.org/pep-0343/"><strong>PEP 343</strong></a><span class="link-target"> [https://peps.python.org/pep-0343/]</span>:
<em>The “with” Statement</em></p>
</td>
</tr>
<tr class="row-odd"><td><p>print_function</p>
</td>
<td><p>2.6.0a2</p>
</td>
<td><p>3.0</p>
</td>
<td><p><span class="target" id="index-5"></span><a class="pep reference external" href="https://peps.python.org/pep-3105/"><strong>PEP 3105</strong></a><span class="link-target"> [https://peps.python.org/pep-3105/]</span>:
<em>Make print a function</em></p>
</td>
</tr>
<tr class="row-even"><td><p>unicode_literals</p>
</td>
<td><p>2.6.0a2</p>
</td>
<td><p>3.0</p>
</td>
<td><p><span class="target" id="index-6"></span><a class="pep reference external" href="https://peps.python.org/pep-3112/"><strong>PEP 3112</strong></a><span class="link-target"> [https://peps.python.org/pep-3112/]</span>:
<em>Bytes literals in Python 3000</em></p>
</td>
</tr>
<tr class="row-odd"><td><p>generator_stop</p>
</td>
<td><p>3.5.0b1</p>
</td>
<td><p>3.7</p>
</td>
<td><p><span class="target" id="index-7"></span><a class="pep reference external" href="https://peps.python.org/pep-0479/"><strong>PEP 479</strong></a><span class="link-target"> [https://peps.python.org/pep-0479/]</span>:
<em>StopIteration handling inside generators</em></p>
</td>
</tr>
<tr class="row-even"><td><p>annotations</p>
</td>
<td><p>3.7.0b1</p>
</td>
<td><p>TBD <a class="footnote-reference brackets" href="#id2" id="id1" role="doc-noteref"><span class="fn-bracket">[</span>1<span class="fn-bracket">]</span></a></p>
</td>
<td><p><span class="target" id="index-8"></span><a class="pep reference external" href="https://peps.python.org/pep-0563/"><strong>PEP 563</strong></a><span class="link-target"> [https://peps.python.org/pep-0563/]</span>:
<em>Postponed evaluation of annotations</em></p>
</td>
</tr>
</tbody>
</table>
<dl class="py class" id="future-classes">
<dt class="sig sig-object py" id="future__._Feature">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">__future__.</span></span><span class="sig-name descname"><span class="pre">_Feature</span></span></dt>
<dd><p>Each statement in <code class="file docutils literal notranslate"><span class="pre">__future__.py</span></code> is of the form:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">FeatureName</span> <span class="o">=</span> <span class="n">_Feature</span><span class="p">(</span><span class="n">OptionalRelease</span><span class="p">,</span> <span class="n">MandatoryRelease</span><span class="p">,</span>
                       <span class="n">CompilerFlag</span><span class="p">)</span>
</pre>
</div>
</div>
<p>where, normally, <em>OptionalRelease</em> is less than <em>MandatoryRelease</em>, and both are
5-tuples of the same form as <a class="reference internal" href="sys.xhtml#sys.version_info" title="sys.version_info"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.version_info</span></code></a>:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="p">(</span><span class="n">PY_MAJOR_VERSION</span><span class="p">,</span> <span class="c1"># the 2 in 2.1.0a3; an int</span>
 <span class="n">PY_MINOR_VERSION</span><span class="p">,</span> <span class="c1"># the 1; an int</span>
 <span class="n">PY_MICRO_VERSION</span><span class="p">,</span> <span class="c1"># the 0; an int</span>
 <span class="n">PY_RELEASE_LEVEL</span><span class="p">,</span> <span class="c1"># "alpha", "beta", "candidate" or "final"; string</span>
 <span class="n">PY_RELEASE_SERIAL</span> <span class="c1"># the 3; an int</span>
<span class="p">)</span>
</pre>
</div>
</div>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="future__._Feature.getOptionalRelease">
<span class="sig-prename descclassname"><span class="pre">_Feature.</span></span><span class="sig-name descname"><span class="pre">getOptionalRelease</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p><em>OptionalRelease</em> records the first release in which the feature was accepted.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="future__._Feature.getMandatoryRelease">
<span class="sig-prename descclassname"><span class="pre">_Feature.</span></span><span class="sig-name descname"><span class="pre">getMandatoryRelease</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>In the case of a <em>MandatoryRelease</em> that has not yet occurred,
<em>MandatoryRelease</em> predicts the release in which the feature will become part of
the language.</p>
<p>Else <em>MandatoryRelease</em> records when the feature became part of the language; in
releases at or after that, modules no longer need a future statement to use the
feature in question, but may continue to use such imports.</p>
<p><em>MandatoryRelease</em> may also be <code class="docutils literal notranslate"><span class="pre">None</span></code>, meaning that a planned feature got
dropped or that it is not yet decided.</p>
</dd>
</dl>

<dl class="py attribute">
<dt class="sig sig-object py" id="future__._Feature.compiler_flag">
<span class="sig-prename descclassname"><span class="pre">_Feature.</span></span><span class="sig-name descname"><span class="pre">compiler_flag</span></span></dt>
<dd><p><em>CompilerFlag</em> is the (bitfield) flag that should be passed in the fourth
argument to the built-in function <a class="reference internal" href="functions.xhtml#compile" title="compile"><code class="xref py py-func docutils literal notranslate"><span class="pre">compile()</span></code></a> to enable the feature in
dynamically compiled code.  This flag is stored in the <a class="reference internal" href="#future__._Feature.compiler_flag" title="__future__._Feature.compiler_flag"><code class="xref py py-attr docutils literal notranslate"><span class="pre">_Feature.compiler_flag</span></code></a>
attribute on <a class="reference internal" href="#future__._Feature" title="__future__._Feature"><code class="xref py py-class docutils literal notranslate"><span class="pre">_Feature</span></code></a> instances.</p>
</dd>
</dl>

<aside class="footnote-list brackets">
<aside class="footnote brackets" id="id2" role="doc-footnote">
<span class="label"><span class="fn-bracket">[</span><a role="doc-backlink" href="#id1">1</a><span class="fn-bracket">]</span></span>
<p><code class="docutils literal notranslate"><span class="pre">from</span> <span class="pre">__future__</span> <span class="pre">import</span> <span class="pre">annotations</span></code> was previously scheduled to
become mandatory in Python 3.10, but the Python Steering Council
twice decided to delay the change
(<a class="reference external" href="https://mail.python.org/archives/list/python-dev@python.org/message/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/">announcement for Python 3.10</a><span class="link-target"> [https://mail.python.org/archives/list/python-dev@python.org/message/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/]</span>;
<a class="reference external" href="https://mail.python.org/archives/list/python-dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/">announcement for Python 3.11</a><span class="link-target"> [https://mail.python.org/archives/list/python-dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/]</span>).
No final decision has been made yet. See also <span class="target" id="index-9"></span><a class="pep reference external" href="https://peps.python.org/pep-0563/"><strong>PEP 563</strong></a><span class="link-target"> [https://peps.python.org/pep-0563/]</span> and <span class="target" id="index-10"></span><a class="pep reference external" href="https://peps.python.org/pep-0649/"><strong>PEP 649</strong></a><span class="link-target"> [https://peps.python.org/pep-0649/]</span>.</p>
</aside>
</aside>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<dl class="simple">
<dt><a class="reference internal" href="../reference/simple_stmts.xhtml#future"><span class="std std-ref">Future statements</span></a></dt>
<dd><p>How the compiler treats future imports.</p>
</dd>
<dt><span class="target" id="index-11"></span><a class="pep reference external" href="https://peps.python.org/pep-0236/"><strong>PEP 236</strong></a><span class="link-target"> [https://peps.python.org/pep-0236/]</span> - Back to the __future__</dt>
<dd><p>The original proposal for the __future__ mechanism.</p>
</dd>
</dl>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
</body>
</html>