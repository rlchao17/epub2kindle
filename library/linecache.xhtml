<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="linecache — Random access to text lines" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/linecache.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="Source code: Lib/linecache.py[https://github.com/python/cpython/tree/3.13/Lib/linecache.py] The linecache module allows one to get any line from a Python source file, while attempting to optimize i..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="Source code: Lib/linecache.py[https://github.com/python/cpython/tree/3.13/Lib/linecache.py] The linecache module allows one to get any line from a Python source file, while attempting to optimize i..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>linecache — Random access to text lines</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    
    <link rel="canonical" href="https://docs.python.org/3/library/linecache.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-linecache">
<span id="linecache-random-access-to-text-lines"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">linecache</span></code> — Random access to text lines</h1>
<p><strong>Source code:</strong> <a class="extlink-source reference external" href="https://github.com/python/cpython/tree/3.13/Lib/linecache.py">Lib/linecache.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.13/Lib/linecache.py]</span></p>
<hr class="docutils" />
<p>The <a class="reference internal" href="#module-linecache" title="linecache: Provides random access to individual lines from text files."><code class="xref py py-mod docutils literal notranslate"><span class="pre">linecache</span></code></a> module allows one to get any line from a Python source file, while
attempting to optimize internally, using a cache, the common case where many
lines are read from a single file.  This is used by the <a class="reference internal" href="traceback.xhtml#module-traceback" title="traceback: Print or retrieve a stack traceback."><code class="xref py py-mod docutils literal notranslate"><span class="pre">traceback</span></code></a> module
to retrieve source lines for inclusion in  the formatted traceback.</p>
<p>The <a class="reference internal" href="tokenize.xhtml#tokenize.open" title="tokenize.open"><code class="xref py py-func docutils literal notranslate"><span class="pre">tokenize.open()</span></code></a> function is used to open files. This
function uses <a class="reference internal" href="tokenize.xhtml#tokenize.detect_encoding" title="tokenize.detect_encoding"><code class="xref py py-func docutils literal notranslate"><span class="pre">tokenize.detect_encoding()</span></code></a> to get the encoding of the
file; in the absence of an encoding token, the file encoding defaults to UTF-8.</p>
<p>The <a class="reference internal" href="#module-linecache" title="linecache: Provides random access to individual lines from text files."><code class="xref py py-mod docutils literal notranslate"><span class="pre">linecache</span></code></a> module defines the following functions:</p>
<dl class="py function">
<dt class="sig sig-object py" id="linecache.getline">
<span class="sig-prename descclassname"><span class="pre">linecache.</span></span><span class="sig-name descname"><span class="pre">getline</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">lineno</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">module_globals</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Get line <em>lineno</em> from file named <em>filename</em>. This function will never raise an
exception — it will return <code class="docutils literal notranslate"><span class="pre">''</span></code> on errors (the terminating newline character
will be included for lines that are found).</p>
<p id="index-0">If a file named <em>filename</em> is not found, the function first checks
for a <span class="target" id="index-1"></span><a class="pep reference external" href="https://peps.python.org/pep-0302/"><strong>PEP 302</strong></a><span class="link-target"> [https://peps.python.org/pep-0302/]</span> <code class="docutils literal notranslate"><span class="pre">__loader__</span></code> in <em>module_globals</em>.
If there is such a loader and it defines a <code class="docutils literal notranslate"><span class="pre">get_source</span></code> method,
then that determines the source lines
(if <code class="docutils literal notranslate"><span class="pre">get_source()</span></code> returns <code class="docutils literal notranslate"><span class="pre">None</span></code>, then <code class="docutils literal notranslate"><span class="pre">''</span></code> is returned).
Finally, if <em>filename</em> is a relative filename,
it is looked up relative to the entries in the module search path, <code class="docutils literal notranslate"><span class="pre">sys.path</span></code>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="linecache.clearcache">
<span class="sig-prename descclassname"><span class="pre">linecache.</span></span><span class="sig-name descname"><span class="pre">clearcache</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Clear the cache.  Use this function if you no longer need lines from files
previously read using <a class="reference internal" href="#linecache.getline" title="linecache.getline"><code class="xref py py-func docutils literal notranslate"><span class="pre">getline()</span></code></a>.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="linecache.checkcache">
<span class="sig-prename descclassname"><span class="pre">linecache.</span></span><span class="sig-name descname"><span class="pre">checkcache</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Check the cache for validity.  Use this function if files in the cache  may have
changed on disk, and you require the updated version.  If <em>filename</em> is omitted,
it will check all the entries in the cache.</p>
</dd></dl>

<dl class="py function">
<dt class="sig sig-object py" id="linecache.lazycache">
<span class="sig-prename descclassname"><span class="pre">linecache.</span></span><span class="sig-name descname"><span class="pre">lazycache</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">filename</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">module_globals</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Capture enough detail about a non-file-based module to permit getting its
lines later via <a class="reference internal" href="#linecache.getline" title="linecache.getline"><code class="xref py py-func docutils literal notranslate"><span class="pre">getline()</span></code></a> even if <em>module_globals</em> is <code class="docutils literal notranslate"><span class="pre">None</span></code> in the later
call. This avoids doing I/O until a line is actually needed, without having
to carry the module globals around indefinitely.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
</dd></dl>

<p>Example:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span><span class="w"> </span><span class="nn">linecache</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">linecache</span><span class="o">.</span><span class="n">getline</span><span class="p">(</span><span class="n">linecache</span><span class="o">.</span><span class="vm">__file__</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
<span class="go">&#39;import sys\n&#39;</span>
</pre></div>
</div>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>