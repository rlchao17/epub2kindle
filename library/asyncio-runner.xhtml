<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<meta property="og:title" content="Runners"/>
<meta property="og:type" content="website"/>
<meta property="og:url" content="https://docs.python.org/3/library/asyncio-runner.xhtml"/>
<meta property="og:site_name" content="Python documentation"/>
<meta property="og:description" content="Source code: Lib/asyncio/runners.py[https://github.com/python/cpython/tree/3.13/Lib/asyncio/runners.py] This section outlines high-level asyncio primitives to run asyncio code. They are built on to..."/>
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png"/>
<meta property="og:image:alt" content="Python documentation"/>
<meta name="description" content="Source code: Lib/asyncio/runners.py[https://github.com/python/cpython/tree/3.13/Lib/asyncio/runners.py] This section outlines high-level asyncio primitives to run asyncio code. They are built on to..."/>
<meta property="og:image:width" content="200"/>
<meta property="og:image:height" content="200"/>
<meta name="theme-color" content="#3776ab"/>

    <title>Runners</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css"/>
    <link rel="stylesheet" type="text/css" href="../_static/epub.css"/>
    
    <link rel="canonical" href="https://docs.python.org/3/library/asyncio-runner.html"/>
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head>
<body>
    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="runners">
<h1>Runners</h1>
<p><strong>Source code:</strong> <a class="extlink-source reference external" href="https://github.com/python/cpython/tree/3.13/Lib/asyncio/runners.py">Lib/asyncio/runners.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.13/Lib/asyncio/runners.py]</span></p>
<p>This section outlines high-level asyncio primitives to run asyncio code.</p>
<p>They are built on top of an <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio-event-loop"><span class="std std-ref">event loop</span></a> with the aim
to simplify async code usage for common wide-spread scenarios.</p>
<nav class="contents local" id="contents">
<ul class="simple">
<li><p><a class="reference internal" href="#running-an-asyncio-program" id="id1">Running an asyncio Program</a></p></li>
<li><p><a class="reference internal" href="#runner-context-manager" id="id2">Runner context manager</a></p></li>
<li><p><a class="reference internal" href="#handling-keyboard-interruption" id="id3">Handling Keyboard Interruption</a></p></li>
</ul>
</nav>
<section id="running-an-asyncio-program">
<h2 class="sigil_not_in_toc"><a class="toc-backref" href="#id1" role="doc-backlink">Running an asyncio Program</a></h2>
<dl class="py function">
<dt class="sig sig-object py" id="asyncio.run">
<span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">run</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">coro</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">debug</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">loop_factory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Execute the <a class="reference internal" href="../glossary.xhtml#term-coroutine"><span class="xref std std-term">coroutine</span></a> <em>coro</em> and return the result.</p>
<p>This function runs the passed coroutine, taking care of
managing the asyncio event loop, <em>finalizing asynchronous
generators</em>, and closing the executor.</p>
<p>This function cannot be called when another asyncio event loop is
running in the same thread.</p>
<p>If <em>debug</em> is <code class="docutils literal notranslate"><span class="pre">True</span></code>, the event loop will be run in debug mode. <code class="docutils literal notranslate"><span class="pre">False</span></code> disables
debug mode explicitly. <code class="docutils literal notranslate"><span class="pre">None</span></code> is used to respect the global
<a class="reference internal" href="asyncio-dev.xhtml#asyncio-debug-mode"><span class="std std-ref">Debug Mode</span></a> settings.</p>
<p>If <em>loop_factory</em> is not <code class="docutils literal notranslate"><span class="pre">None</span></code>, it is used to create a new event loop;
otherwise <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.new_event_loop" title="asyncio.new_event_loop"><code class="xref py py-func docutils literal notranslate"><span class="pre">asyncio.new_event_loop()</span></code></a> is used. The loop is closed at the end.
This function should be used as a main entry point for asyncio programs,
and should ideally only be called once. It is recommended to use
<em>loop_factory</em> to configure the event loop instead of policies.
Passing <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.EventLoop" title="asyncio.EventLoop"><code class="xref py py-class docutils literal notranslate"><span class="pre">asyncio.EventLoop</span></code></a> allows running asyncio without the
policy system.</p>
<p>The executor is given a timeout duration of 5 minutes to shutdown.
If the executor hasnâ€™t finished within that duration, a warning is
emitted and the executor is closed.</p>
<p>Example:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">)</span>

<span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre>
</div>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">Changed in version 3.9: </span>Updated to use <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.shutdown_default_executor" title="asyncio.loop.shutdown_default_executor"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.shutdown_default_executor()</span></code></a>.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">Changed in version 3.10: </span><em>debug</em> is <code class="docutils literal notranslate"><span class="pre">None</span></code> by default to respect the global debug mode settings.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">Changed in version 3.12: </span>Added <em>loop_factory</em> parameter.</p>
</div>
</dd>
</dl>

</section>
<section id="runner-context-manager">
<h2 class="sigil_not_in_toc"><a class="toc-backref" href="#id2" role="doc-backlink">Runner context manager</a></h2>
<dl class="py class">
<dt class="sig sig-object py" id="asyncio.Runner">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">Runner</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">debug</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">loop_factory</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>A context manager that simplifies <em>multiple</em> async function calls in the same
context.</p>
<p>Sometimes several top-level async functions should be called in the same <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio-event-loop"><span class="std std-ref">event
loop</span></a> and <a class="reference internal" href="contextvars.xhtml#contextvars.Context" title="contextvars.Context"><code class="xref py py-class docutils literal notranslate"><span class="pre">contextvars.Context</span></code></a>.</p>
<p>If <em>debug</em> is <code class="docutils literal notranslate"><span class="pre">True</span></code>, the event loop will be run in debug mode. <code class="docutils literal notranslate"><span class="pre">False</span></code> disables
debug mode explicitly. <code class="docutils literal notranslate"><span class="pre">None</span></code> is used to respect the global
<a class="reference internal" href="asyncio-dev.xhtml#asyncio-debug-mode"><span class="std std-ref">Debug Mode</span></a> settings.</p>
<p><em>loop_factory</em> could be used for overriding the loop creation.
It is the responsibility of the <em>loop_factory</em> to set the created loop as the
current one. By default <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.new_event_loop" title="asyncio.new_event_loop"><code class="xref py py-func docutils literal notranslate"><span class="pre">asyncio.new_event_loop()</span></code></a> is used and set as
current event loop with <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.set_event_loop" title="asyncio.set_event_loop"><code class="xref py py-func docutils literal notranslate"><span class="pre">asyncio.set_event_loop()</span></code></a> if <em>loop_factory</em> is <code class="docutils literal notranslate"><span class="pre">None</span></code>.</p>
<p>Basically, <a class="reference internal" href="#asyncio.run" title="asyncio.run"><code class="xref py py-func docutils literal notranslate"><span class="pre">asyncio.run()</span></code></a> example can be rewritten with the runner usage:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">)</span>

<span class="k">with</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">Runner</span><span class="p">()</span> <span class="k">as</span> <span class="n">runner</span><span class="p">:</span>
    <span class="n">runner</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre>
</div>
</div>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Runner.run">
<span class="sig-name descname"><span class="pre">run</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">coro</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">context</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Run a <a class="reference internal" href="../glossary.xhtml#term-coroutine"><span class="xref std std-term">coroutine</span></a> <em>coro</em> in the embedded loop.</p>
<p>Return the coroutineâ€™s result or raise its exception.</p>
<p>An optional keyword-only <em>context</em> argument allows specifying a
custom <a class="reference internal" href="contextvars.xhtml#contextvars.Context" title="contextvars.Context"><code class="xref py py-class docutils literal notranslate"><span class="pre">contextvars.Context</span></code></a> for the <em>coro</em> to run in.
The runnerâ€™s default context is used if <code class="docutils literal notranslate"><span class="pre">None</span></code>.</p>
<p>This function cannot be called when another asyncio event loop is
running in the same thread.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Runner.close">
<span class="sig-name descname"><span class="pre">close</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Close the runner.</p>
<p>Finalize asynchronous generators, shutdown default executor, close the event loop
and release embedded <a class="reference internal" href="contextvars.xhtml#contextvars.Context" title="contextvars.Context"><code class="xref py py-class docutils literal notranslate"><span class="pre">contextvars.Context</span></code></a>.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Runner.get_loop">
<span class="sig-name descname"><span class="pre">get_loop</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the event loop associated with the runner instance.</p>
</dd>
</dl>

<div class="admonition note">
<p class="admonition-title">Note</p>
<p><a class="reference internal" href="#asyncio.Runner" title="asyncio.Runner"><code class="xref py py-class docutils literal notranslate"><span class="pre">Runner</span></code></a> uses the lazy initialization strategy, its constructor doesnâ€™t
initialize underlying low-level structures.</p>
<p>Embedded <em>loop</em> and <em>context</em> are created at the <a class="reference internal" href="../reference/compound_stmts.xhtml#with"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">with</span></code></a> body entering
or the first call of <a class="reference internal" href="#asyncio.run" title="asyncio.run"><code class="xref py py-meth docutils literal notranslate"><span class="pre">run()</span></code></a> or <a class="reference internal" href="#asyncio.Runner.get_loop" title="asyncio.Runner.get_loop"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_loop()</span></code></a>.</p>
</div>
</dd>
</dl>

</section>
<section id="handling-keyboard-interruption">
<h2 class="sigil_not_in_toc"><a class="toc-backref" href="#id3" role="doc-backlink">Handling Keyboard Interruption</a></h2>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
<p>When <a class="reference internal" href="signal.xhtml#signal.SIGINT" title="signal.SIGINT"><code class="xref py py-const docutils literal notranslate"><span class="pre">signal.SIGINT</span></code></a> is raised by <kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">Ctrl</kbd>-<kbd class="kbd docutils literal notranslate">C</kbd></kbd>, <a class="reference internal" href="exceptions.xhtml#KeyboardInterrupt" title="KeyboardInterrupt"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyboardInterrupt</span></code></a>
exception is raised in the main thread by default. However this doesnâ€™t work with
<a class="reference internal" href="asyncio.xhtml#module-asyncio" title="asyncio: Asynchronous I/O."><code class="xref py py-mod docutils literal notranslate"><span class="pre">asyncio</span></code></a> because it can interrupt asyncio internals and can hang the program from
exiting.</p>
<p>To mitigate this issue, <a class="reference internal" href="asyncio.xhtml#module-asyncio" title="asyncio: Asynchronous I/O."><code class="xref py py-mod docutils literal notranslate"><span class="pre">asyncio</span></code></a> handles <a class="reference internal" href="signal.xhtml#signal.SIGINT" title="signal.SIGINT"><code class="xref py py-const docutils literal notranslate"><span class="pre">signal.SIGINT</span></code></a> as follows:</p>
<ol class="arabic simple">
<li><p><a class="reference internal" href="#asyncio.Runner.run" title="asyncio.Runner.run"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Runner.run()</span></code></a> installs a custom <a class="reference internal" href="signal.xhtml#signal.SIGINT" title="signal.SIGINT"><code class="xref py py-const docutils literal notranslate"><span class="pre">signal.SIGINT</span></code></a> handler before
any user code is executed and removes it when exiting from the function.</p></li>
<li><p>The <a class="reference internal" href="#asyncio.Runner" title="asyncio.Runner"><code class="xref py py-class docutils literal notranslate"><span class="pre">Runner</span></code></a> creates the main task for the passed coroutine for its
execution.</p></li>
<li><p>When <a class="reference internal" href="signal.xhtml#signal.SIGINT" title="signal.SIGINT"><code class="xref py py-const docutils literal notranslate"><span class="pre">signal.SIGINT</span></code></a> is raised by <kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">Ctrl</kbd>-<kbd class="kbd docutils literal notranslate">C</kbd></kbd>, the custom signal handler
cancels the main task by calling <a class="reference internal" href="asyncio-task.xhtml#asyncio.Task.cancel" title="asyncio.Task.cancel"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Task.cancel()</span></code></a> which raises
<a class="reference internal" href="asyncio-exceptions.xhtml#asyncio.CancelledError" title="asyncio.CancelledError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">asyncio.CancelledError</span></code></a> inside the main task.  This causes the Python stack
to unwind, <code class="docutils literal notranslate"><span class="pre">try/except</span></code> and <code class="docutils literal notranslate"><span class="pre">try/finally</span></code> blocks can be used for resource
cleanup.  After the main task is cancelled, <a class="reference internal" href="#asyncio.Runner.run" title="asyncio.Runner.run"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Runner.run()</span></code></a> raises
<a class="reference internal" href="exceptions.xhtml#KeyboardInterrupt" title="KeyboardInterrupt"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyboardInterrupt</span></code></a>.</p></li>
<li><p>A user could write a tight loop which cannot be interrupted by
<a class="reference internal" href="asyncio-task.xhtml#asyncio.Task.cancel" title="asyncio.Task.cancel"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Task.cancel()</span></code></a>, in which case the second following <kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">Ctrl</kbd>-<kbd class="kbd docutils literal notranslate">C</kbd></kbd>
immediately raises the <a class="reference internal" href="exceptions.xhtml#KeyboardInterrupt" title="KeyboardInterrupt"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyboardInterrupt</span></code></a> without cancelling the main task.</p></li>
</ol>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
</body>
</html>