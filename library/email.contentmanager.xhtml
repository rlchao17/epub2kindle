<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<meta property="og:title" content="email.contentmanager: Managing MIME Content"/>
<meta property="og:type" content="website"/>
<meta property="og:url" content="https://docs.python.org/3/library/email.contentmanager.xhtml"/>
<meta property="og:site_name" content="Python documentation"/>
<meta property="og:description" content="Source code: Lib/email/contentmanager.py[https://github.com/python/cpython/tree/3.13/Lib/email/contentmanager.py] Content Manager Instances: Currently the email package provides only one concrete c..."/>
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png"/>
<meta property="og:image:alt" content="Python documentation"/>
<meta name="description" content="Source code: Lib/email/contentmanager.py[https://github.com/python/cpython/tree/3.13/Lib/email/contentmanager.py] Content Manager Instances: Currently the email package provides only one concrete c..."/>
<meta property="og:image:width" content="200"/>
<meta property="og:image:height" content="200"/>
<meta name="theme-color" content="#3776ab"/>

    <title>email.contentmanager: Managing MIME Content</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css"/>
    <link rel="stylesheet" type="text/css" href="../_static/epub.css"/>
    
    <link rel="canonical" href="https://docs.python.org/3/library/email.contentmanager.html"/>
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head>
<body>
    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-email.contentmanager">
<span id="email-contentmanager-managing-mime-content"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">email.contentmanager</span></code>: Managing MIME Content</h1>
<p><strong>Source code:</strong> <a class="extlink-source reference external" href="https://github.com/python/cpython/tree/3.13/Lib/email/contentmanager.py">Lib/email/contentmanager.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.13/Lib/email/contentmanager.py]</span></p>
<hr class="docutils"/>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6: </span><a class="footnote-reference brackets" href="#id2" id="id1" role="doc-noteref"><span class="fn-bracket">[</span>1<span class="fn-bracket">]</span></a></p>
</div>
<dl class="py class">
<dt class="sig sig-object py" id="email.contentmanager.ContentManager">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">email.contentmanager.</span></span><span class="sig-name descname"><span class="pre">ContentManager</span></span></dt>
<dd><p>Base class for content managers.  Provides the standard registry mechanisms
to register converters between MIME content and other representations, as
well as the <code class="docutils literal notranslate"><span class="pre">get_content</span></code> and <code class="docutils literal notranslate"><span class="pre">set_content</span></code> dispatch methods.</p>
<dl class="py method">
<dt class="sig sig-object py" id="email.contentmanager.ContentManager.get_content">
<span class="sig-name descname"><span class="pre">get_content</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">msg</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">kw</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Look up a handler function based on the <code class="docutils literal notranslate"><span class="pre">mimetype</span></code> of <em>msg</em> (see next
paragraph), call it, passing through all arguments, and return the result
of the call.  The expectation is that the handler will extract the
payload from <em>msg</em> and return an object that encodes information about
the extracted data.</p>
<p>To find the handler, look for the following keys in the registry,
stopping with the first one found:</p>
<ul class="simple">
<li><p>the string representing the full MIME type (<code class="docutils literal notranslate"><span class="pre">maintype/subtype</span></code>)</p></li>
<li><p>the string representing the <code class="docutils literal notranslate"><span class="pre">maintype</span></code></p></li>
<li><p>the empty string</p></li>
</ul>
<p>If none of these keys produce a handler, raise a <a class="reference internal" href="exceptions.xhtml#KeyError" title="KeyError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyError</span></code></a> for the
full MIME type.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="email.contentmanager.ContentManager.set_content">
<span class="sig-name descname"><span class="pre">set_content</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">msg</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">obj</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">kw</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>If the <code class="docutils literal notranslate"><span class="pre">maintype</span></code> is <code class="docutils literal notranslate"><span class="pre">multipart</span></code>, raise a <a class="reference internal" href="exceptions.xhtml#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a>; otherwise
look up a handler function based on the type of <em>obj</em> (see next
paragraph), call <a class="reference internal" href="email.message.xhtml#email.message.EmailMessage.clear_content" title="email.message.EmailMessage.clear_content"><code class="xref py py-meth docutils literal notranslate"><span class="pre">clear_content()</span></code></a> on the
<em>msg</em>, and call the handler function, passing through all arguments.  The
expectation is that the handler will transform and store <em>obj</em> into
<em>msg</em>, possibly making other changes to <em>msg</em> as well, such as adding
various MIME headers to encode information needed to interpret the stored
data.</p>
<p>To find the handler, obtain the type of <em>obj</em> (<code class="docutils literal notranslate"><span class="pre">typ</span> <span class="pre">=</span> <span class="pre">type(obj)</span></code>), and
look for the following keys in the registry, stopping with the first one
found:</p>
<ul class="simple">
<li><p>the type itself (<code class="docutils literal notranslate"><span class="pre">typ</span></code>)</p></li>
<li><p>the type’s fully qualified name (<code class="docutils literal notranslate"><span class="pre">typ.__module__</span> <span class="pre">+</span> <span class="pre">'.'</span> <span class="pre">+</span>
<span class="pre">typ.__qualname__</span></code>).</p></li>
<li><p>the type’s <a class="reference internal" href="../reference/datamodel.xhtml#type.__qualname__" title="type.__qualname__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">qualname</span></code></a> (<code class="docutils literal notranslate"><span class="pre">typ.__qualname__</span></code>)</p></li>
<li><p>the type’s <a class="reference internal" href="../reference/datamodel.xhtml#type.__name__" title="type.__name__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">name</span></code></a> (<code class="docutils literal notranslate"><span class="pre">typ.__name__</span></code>).</p></li>
</ul>
<p>If none of the above match, repeat all of the checks above for each of
the types in the <a class="reference internal" href="../glossary.xhtml#term-MRO"><span class="xref std std-term">MRO</span></a> (<a class="reference internal" href="../reference/datamodel.xhtml#type.__mro__" title="type.__mro__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">typ.__mro__</span></code></a>).
Finally, if no other key
yields a handler, check for a handler for the key <code class="docutils literal notranslate"><span class="pre">None</span></code>.  If there is
no handler for <code class="docutils literal notranslate"><span class="pre">None</span></code>, raise a <a class="reference internal" href="exceptions.xhtml#KeyError" title="KeyError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyError</span></code></a> for the fully
qualified name of the type.</p>
<p>Also add a <em class="mailheader">MIME-Version</em> header if one is not present (see
also <a class="reference internal" href="email.message.xhtml#email.message.MIMEPart" title="email.message.MIMEPart"><code class="xref py py-class docutils literal notranslate"><span class="pre">MIMEPart</span></code></a>).</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="email.contentmanager.ContentManager.add_get_handler">
<span class="sig-name descname"><span class="pre">add_get_handler</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">key</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">handler</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Record the function <em>handler</em> as the handler for <em>key</em>.  For the possible
values of <em>key</em>, see <a class="reference internal" href="#email.contentmanager.get_content" title="email.contentmanager.get_content"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_content()</span></code></a>.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="email.contentmanager.ContentManager.add_set_handler">
<span class="sig-name descname"><span class="pre">add_set_handler</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">typekey</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">handler</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Record <em>handler</em> as the function to call when an object of a type
matching <em>typekey</em> is passed to <a class="reference internal" href="#email.contentmanager.set_content" title="email.contentmanager.set_content"><code class="xref py py-meth docutils literal notranslate"><span class="pre">set_content()</span></code></a>.  For the possible
values of <em>typekey</em>, see <a class="reference internal" href="#email.contentmanager.set_content" title="email.contentmanager.set_content"><code class="xref py py-meth docutils literal notranslate"><span class="pre">set_content()</span></code></a>.</p>
</dd>
</dl>

</dd>
</dl>

<section id="content-manager-instances">
<h2 class="sigil_not_in_toc">Content Manager Instances</h2>
<p>Currently the email package provides only one concrete content manager,
<a class="reference internal" href="#email.contentmanager.raw_data_manager" title="email.contentmanager.raw_data_manager"><code class="xref py py-data docutils literal notranslate"><span class="pre">raw_data_manager</span></code></a>, although more may be added in the future.
<a class="reference internal" href="#email.contentmanager.raw_data_manager" title="email.contentmanager.raw_data_manager"><code class="xref py py-data docutils literal notranslate"><span class="pre">raw_data_manager</span></code></a> is the
<a class="reference internal" href="email.policy.xhtml#email.policy.EmailPolicy.content_manager" title="email.policy.EmailPolicy.content_manager"><code class="xref py py-attr docutils literal notranslate"><span class="pre">content_manager</span></code></a> provided by
<a class="reference internal" href="email.policy.xhtml#email.policy.EmailPolicy" title="email.policy.EmailPolicy"><code class="xref py py-attr docutils literal notranslate"><span class="pre">EmailPolicy</span></code></a> and its derivatives.</p>
<dl class="py data">
<dt class="sig sig-object py" id="email.contentmanager.raw_data_manager">
<span class="sig-prename descclassname"><span class="pre">email.contentmanager.</span></span><span class="sig-name descname"><span class="pre">raw_data_manager</span></span></dt>
<dd><p>This content manager provides only a minimum interface beyond that provided
by <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message" title="email.message.Message"><code class="xref py py-class docutils literal notranslate"><span class="pre">Message</span></code></a> itself:  it deals only with text, raw
byte strings, and <a class="reference internal" href="email.compat32-message.xhtml#email.message.Message" title="email.message.Message"><code class="xref py py-class docutils literal notranslate"><span class="pre">Message</span></code></a> objects.  Nevertheless, it
provides significant advantages compared to the base API: <code class="docutils literal notranslate"><span class="pre">get_content</span></code> on
a text part will return a unicode string without the application needing to
manually decode it, <code class="docutils literal notranslate"><span class="pre">set_content</span></code> provides a rich set of options for
controlling the headers added to a part and controlling the content transfer
encoding, and it enables the use of the various <code class="docutils literal notranslate"><span class="pre">add_</span></code> methods, thereby
simplifying the creation of multipart messages.</p>
<dl class="py method">
<dt class="sig sig-object py" id="email.contentmanager.get_content">
<span class="sig-prename descclassname"><span class="pre">email.contentmanager.</span></span><span class="sig-name descname"><span class="pre">get_content</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">msg</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">errors</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">'replace'</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return the payload of the part as either a string (for <code class="docutils literal notranslate"><span class="pre">text</span></code> parts), an
<a class="reference internal" href="email.message.xhtml#email.message.EmailMessage" title="email.message.EmailMessage"><code class="xref py py-class docutils literal notranslate"><span class="pre">EmailMessage</span></code></a> object (for <code class="docutils literal notranslate"><span class="pre">message/rfc822</span></code>
parts), or a <code class="docutils literal notranslate"><span class="pre">bytes</span></code> object (for all other non-multipart types).  Raise
a <a class="reference internal" href="exceptions.xhtml#KeyError" title="KeyError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyError</span></code></a> if called on a <code class="docutils literal notranslate"><span class="pre">multipart</span></code>.  If the part is a
<code class="docutils literal notranslate"><span class="pre">text</span></code> part and <em>errors</em> is specified, use it as the error handler when
decoding the payload to unicode.  The default error handler is
<code class="docutils literal notranslate"><span class="pre">replace</span></code>.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="email.contentmanager.set_content">
<span class="sig-prename descclassname"><span class="pre">email.contentmanager.</span></span><span class="sig-name descname"><span class="pre">set_content</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">msg</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">&lt;'str'&gt;</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">subtype="plain"</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">charset='utf-8'</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cte=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">disposition=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cid=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">params=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">headers=None</span></span></em><span class="sig-paren">)</span></dt>
<dt class="sig sig-object py">
<span class="sig-prename descclassname"><span class="pre">email.contentmanager.</span></span><span class="sig-name descname"><span class="pre">set_content</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">msg</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">&lt;'bytes'&gt;</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">maintype</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">subtype</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cte="base64"</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">disposition=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cid=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">params=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">headers=None</span></span></em><span class="sig-paren">)</span></dt>
<dt class="sig sig-object py">
<span class="sig-prename descclassname"><span class="pre">email.contentmanager.</span></span><span class="sig-name descname"><span class="pre">set_content</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">msg</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">&lt;'EmailMessage'&gt;</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cte=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">disposition=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">filename=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">cid=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">params=None</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">headers=None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add headers and payload to <em>msg</em>:</p>
<p>Add a <em class="mailheader">Content-Type</em> header with a <code class="docutils literal notranslate"><span class="pre">maintype/subtype</span></code>
value.</p>
<ul class="simple">
<li><p>For <code class="docutils literal notranslate"><span class="pre">str</span></code>, set the MIME <code class="docutils literal notranslate"><span class="pre">maintype</span></code> to <code class="docutils literal notranslate"><span class="pre">text</span></code>, and set the
subtype to <em>subtype</em> if it is specified, or <code class="docutils literal notranslate"><span class="pre">plain</span></code> if it is not.</p></li>
<li><p>For <code class="docutils literal notranslate"><span class="pre">bytes</span></code>, use the specified <em>maintype</em> and <em>subtype</em>, or
raise a <a class="reference internal" href="exceptions.xhtml#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a> if they are not specified.</p></li>
<li><p>For <a class="reference internal" href="email.message.xhtml#email.message.EmailMessage" title="email.message.EmailMessage"><code class="xref py py-class docutils literal notranslate"><span class="pre">EmailMessage</span></code></a> objects, set the maintype
to <code class="docutils literal notranslate"><span class="pre">message</span></code>, and set the subtype to <em>subtype</em> if it is
specified or <code class="docutils literal notranslate"><span class="pre">rfc822</span></code> if it is not.  If <em>subtype</em> is
<code class="docutils literal notranslate"><span class="pre">partial</span></code>, raise an error (<code class="docutils literal notranslate"><span class="pre">bytes</span></code> objects must be used to
construct <code class="docutils literal notranslate"><span class="pre">message/partial</span></code> parts).</p></li>
</ul>
<p>If <em>charset</em> is provided (which is valid only for <code class="docutils literal notranslate"><span class="pre">str</span></code>), encode the
string to bytes using the specified character set.  The default is
<code class="docutils literal notranslate"><span class="pre">utf-8</span></code>.  If the specified <em>charset</em> is a known alias for a standard
MIME charset name, use the standard charset instead.</p>
<p>If <em>cte</em> is set, encode the payload using the specified content transfer
encoding, and set the <em class="mailheader">Content-Transfer-Encoding</em> header to
that value.  Possible values for <em>cte</em> are <code class="docutils literal notranslate"><span class="pre">quoted-printable</span></code>,
<code class="docutils literal notranslate"><span class="pre">base64</span></code>, <code class="docutils literal notranslate"><span class="pre">7bit</span></code>, <code class="docutils literal notranslate"><span class="pre">8bit</span></code>, and <code class="docutils literal notranslate"><span class="pre">binary</span></code>.  If the input cannot be
encoded in the specified encoding (for example, specifying a <em>cte</em> of
<code class="docutils literal notranslate"><span class="pre">7bit</span></code> for an input that contains non-ASCII values), raise a
<a class="reference internal" href="exceptions.xhtml#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>.</p>
<ul class="simple">
<li><p>For <code class="docutils literal notranslate"><span class="pre">str</span></code> objects, if <em>cte</em> is not set use heuristics to
determine the most compact encoding.  Prior to encoding,
<a class="reference internal" href="stdtypes.xhtml#str.splitlines" title="str.splitlines"><code class="xref py py-meth docutils literal notranslate"><span class="pre">str.splitlines()</span></code></a> is used to normalize all line boundaries,
ensuring that each line of the payload is terminated by the
current policy’s <a class="reference internal" href="email.policy.xhtml#email.policy.Policy.linesep" title="email.policy.Policy.linesep"><code class="xref py py-data docutils literal notranslate"><span class="pre">linesep</span></code></a> property
(even if the original string did not end with one).</p></li>
<li><p>For <code class="docutils literal notranslate"><span class="pre">bytes</span></code> objects, <em>cte</em> is taken to be base64 if not set,
and the aforementioned newline translation is not performed.</p></li>
<li><p>For <a class="reference internal" href="email.message.xhtml#email.message.EmailMessage" title="email.message.EmailMessage"><code class="xref py py-class docutils literal notranslate"><span class="pre">EmailMessage</span></code></a>, per <span class="target" id="index-0"></span><a class="rfc reference external" href="https://datatracker.ietf.org/doc/html/rfc2046.html"><strong>RFC 2046</strong></a><span class="link-target"> [https://datatracker.ietf.org/doc/html/rfc2046.html]</span>, raise
an error if a <em>cte</em> of <code class="docutils literal notranslate"><span class="pre">quoted-printable</span></code> or <code class="docutils literal notranslate"><span class="pre">base64</span></code> is
requested for <em>subtype</em> <code class="docutils literal notranslate"><span class="pre">rfc822</span></code>, and for any <em>cte</em> other than
<code class="docutils literal notranslate"><span class="pre">7bit</span></code> for <em>subtype</em> <code class="docutils literal notranslate"><span class="pre">external-body</span></code>.  For
<code class="docutils literal notranslate"><span class="pre">message/rfc822</span></code>, use <code class="docutils literal notranslate"><span class="pre">8bit</span></code> if <em>cte</em> is not specified.  For
all other values of <em>subtype</em>, use <code class="docutils literal notranslate"><span class="pre">7bit</span></code>.</p></li>
</ul>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>A <em>cte</em> of <code class="docutils literal notranslate"><span class="pre">binary</span></code> does not actually work correctly yet.
The <code class="docutils literal notranslate"><span class="pre">EmailMessage</span></code> object as modified by <code class="docutils literal notranslate"><span class="pre">set_content</span></code> is
correct, but <a class="reference internal" href="email.generator.xhtml#email.generator.BytesGenerator" title="email.generator.BytesGenerator"><code class="xref py py-class docutils literal notranslate"><span class="pre">BytesGenerator</span></code></a> does not
serialize it correctly.</p>
</div>
<p>If <em>disposition</em> is set, use it as the value of the
<em class="mailheader">Content-Disposition</em> header.  If not specified, and
<em>filename</em> is specified, add the header with the value <code class="docutils literal notranslate"><span class="pre">attachment</span></code>.
If <em>disposition</em> is not specified and <em>filename</em> is also not specified,
do not add the header.  The only valid values for <em>disposition</em> are
<code class="docutils literal notranslate"><span class="pre">attachment</span></code> and <code class="docutils literal notranslate"><span class="pre">inline</span></code>.</p>
<p>If <em>filename</em> is specified, use it as the value of the <code class="docutils literal notranslate"><span class="pre">filename</span></code>
parameter of the <em class="mailheader">Content-Disposition</em> header.</p>
<p>If <em>cid</em> is specified, add a <em class="mailheader">Content-ID</em> header with
<em>cid</em> as its value.</p>
<p>If <em>params</em> is specified, iterate its <code class="docutils literal notranslate"><span class="pre">items</span></code> method and use the
resulting <code class="docutils literal notranslate"><span class="pre">(key,</span> <span class="pre">value)</span></code> pairs to set additional parameters on the
<em class="mailheader">Content-Type</em> header.</p>
<p>If <em>headers</em> is specified and is a list of strings of the form
<code class="docutils literal notranslate"><span class="pre">headername:</span> <span class="pre">headervalue</span></code> or a list of <code class="docutils literal notranslate"><span class="pre">header</span></code> objects
(distinguished from strings by having a <code class="docutils literal notranslate"><span class="pre">name</span></code> attribute), add the
headers to <em>msg</em>.</p>
</dd>
</dl>

</dd>
</dl>

<p class="rubric">Footnotes</p>
<aside class="footnote-list brackets">
<aside class="footnote brackets" id="id2" role="doc-footnote">
<span class="label"><span class="fn-bracket">[</span><a role="doc-backlink" href="#id1">1</a><span class="fn-bracket">]</span></span>
<p>Originally added in 3.4 as a <a class="reference internal" href="../glossary.xhtml#term-provisional-package"><span class="xref std std-term">provisional module</span></a></p>
</aside>
</aside>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
</body>
</html>