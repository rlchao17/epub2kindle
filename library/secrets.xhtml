<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<meta property="og:title" content="secrets — Generate secure random numbers for managing secrets"/>
<meta property="og:type" content="website"/>
<meta property="og:url" content="https://docs.python.org/3/library/secrets.xhtml"/>
<meta property="og:site_name" content="Python documentation"/>
<meta property="og:description" content="Source code: Lib/secrets.py[https://github.com/python/cpython/tree/3.13/Lib/secrets.py] The secrets module is used for generating cryptographically strong random numbers suitable for managing data ..."/>
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png"/>
<meta property="og:image:alt" content="Python documentation"/>
<meta name="description" content="Source code: Lib/secrets.py[https://github.com/python/cpython/tree/3.13/Lib/secrets.py] The secrets module is used for generating cryptographically strong random numbers suitable for managing data ..."/>
<meta property="og:image:width" content="200"/>
<meta property="og:image:height" content="200"/>
<meta name="theme-color" content="#3776ab"/>

    <title>secrets — Generate secure random numbers for managing secrets</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css"/>
    <link rel="stylesheet" type="text/css" href="../_static/epub.css"/>
    
    <link rel="canonical" href="https://docs.python.org/3/library/secrets.html"/>
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head>
<body>
    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="module-secrets">
<span id="secrets-generate-secure-random-numbers-for-managing-secrets"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">secrets</span></code> — Generate secure random numbers for managing secrets</h1>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.6.</span></p>
</div>
<p><strong>Source code:</strong> <a class="extlink-source reference external" href="https://github.com/python/cpython/tree/3.13/Lib/secrets.py">Lib/secrets.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.13/Lib/secrets.py]</span></p>
<hr class="docutils"/>
<p>The <a class="reference internal" href="#module-secrets" title="secrets: Generate secure random numbers for managing secrets."><code class="xref py py-mod docutils literal notranslate"><span class="pre">secrets</span></code></a> module is used for generating cryptographically strong
random numbers suitable for managing data such as passwords, account
authentication, security tokens, and related secrets.</p>
<p>In particular, <a class="reference internal" href="#module-secrets" title="secrets: Generate secure random numbers for managing secrets."><code class="xref py py-mod docutils literal notranslate"><span class="pre">secrets</span></code></a> should be used in preference to the
default pseudo-random number generator in the <a class="reference internal" href="random.xhtml#module-random" title="random: Generate pseudo-random numbers with various common distributions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">random</span></code></a> module, which
is designed for modelling and simulation, not security or cryptography.</p>
<div class="admonition seealso">
<p class="admonition-title">See also</p>
<p><span class="target" id="index-0"></span><a class="pep reference external" href="https://peps.python.org/pep-0506/"><strong>PEP 506</strong></a><span class="link-target"> [https://peps.python.org/pep-0506/]</span></p>
</div>
<section id="random-numbers">
<h2 class="sigil_not_in_toc">Random numbers</h2>
<p>The <a class="reference internal" href="#module-secrets" title="secrets: Generate secure random numbers for managing secrets."><code class="xref py py-mod docutils literal notranslate"><span class="pre">secrets</span></code></a> module provides access to the most secure source of
randomness that your operating system provides.</p>
<dl class="py class">
<dt class="sig sig-object py" id="secrets.SystemRandom">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">secrets.</span></span><span class="sig-name descname"><span class="pre">SystemRandom</span></span></dt>
<dd><p>A class for generating random numbers using the highest-quality
sources provided by the operating system.  See
<a class="reference internal" href="random.xhtml#random.SystemRandom" title="random.SystemRandom"><code class="xref py py-class docutils literal notranslate"><span class="pre">random.SystemRandom</span></code></a> for additional details.</p>
</dd>
</dl>

<dl class="py function">
<dt class="sig sig-object py" id="secrets.choice">
<span class="sig-prename descclassname"><span class="pre">secrets.</span></span><span class="sig-name descname"><span class="pre">choice</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">seq</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return a randomly chosen element from a non-empty sequence.</p>
</dd>
</dl>

<dl class="py function">
<dt class="sig sig-object py" id="secrets.randbelow">
<span class="sig-prename descclassname"><span class="pre">secrets.</span></span><span class="sig-name descname"><span class="pre">randbelow</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">exclusive_upper_bound</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return a random int in the range [0, <em>exclusive_upper_bound</em>).</p>
</dd>
</dl>

<dl class="py function">
<dt class="sig sig-object py" id="secrets.randbits">
<span class="sig-prename descclassname"><span class="pre">secrets.</span></span><span class="sig-name descname"><span class="pre">randbits</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">k</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return a non-negative int with <em>k</em> random bits.</p>
</dd>
</dl>

</section>
<section id="generating-tokens">
<h2 class="sigil_not_in_toc">Generating tokens</h2>
<p>The <a class="reference internal" href="#module-secrets" title="secrets: Generate secure random numbers for managing secrets."><code class="xref py py-mod docutils literal notranslate"><span class="pre">secrets</span></code></a> module provides functions for generating secure
tokens, suitable for applications such as password resets,
hard-to-guess URLs, and similar.</p>
<dl class="py function">
<dt class="sig sig-object py" id="secrets.token_bytes">
<span class="sig-prename descclassname"><span class="pre">secrets.</span></span><span class="sig-name descname"><span class="pre">token_bytes</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">nbytes=None</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>Return a random byte string containing <em>nbytes</em> number of bytes.
If <em>nbytes</em> is <code class="docutils literal notranslate"><span class="pre">None</span></code> or not supplied, a reasonable default is
used.</p>
<div class="highlight-pycon notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">token_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>  
<span class="go">b'\xebr\x17D*t\xae\xd4\xe3S\xb6\xe2\xebP1\x8b'</span>
</pre>
</div>
</div>
</dd>
</dl>

<dl class="py function">
<dt class="sig sig-object py" id="secrets.token_hex">
<span class="sig-prename descclassname"><span class="pre">secrets.</span></span><span class="sig-name descname"><span class="pre">token_hex</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">nbytes=None</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>Return a random text string, in hexadecimal.  The string has <em>nbytes</em>
random bytes, each byte converted to two hex digits.  If <em>nbytes</em> is
<code class="docutils literal notranslate"><span class="pre">None</span></code> or not supplied, a reasonable default is used.</p>
<div class="highlight-pycon notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">token_hex</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>  
<span class="go">'f9bf78b9a18ce6d46a0cd2b0b86df9da'</span>
</pre>
</div>
</div>
</dd>
</dl>

<dl class="py function">
<dt class="sig sig-object py" id="secrets.token_urlsafe">
<span class="sig-prename descclassname"><span class="pre">secrets.</span></span><span class="sig-name descname"><span class="pre">token_urlsafe</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="n"><span class="pre">nbytes=None</span></span></em><span class="optional">]</span><span class="sig-paren">)</span></dt>
<dd><p>Return a random URL-safe text string, containing <em>nbytes</em> random
bytes.  The text is Base64 encoded, so on average each byte results
in approximately 1.3 characters.  If <em>nbytes</em> is <code class="docutils literal notranslate"><span class="pre">None</span></code> or not
supplied, a reasonable default is used.</p>
<div class="highlight-pycon notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">token_urlsafe</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>  
<span class="go">'Drmhze6EPcv0fN_81Bj-nA'</span>
</pre>
</div>
</div>
</dd>
</dl>

<section id="how-many-bytes-should-tokens-use">
<h3 class="sigil_not_in_toc">How many bytes should tokens use?</h3>
<p>To be secure against
<a class="reference external" href="https://en.wikipedia.org/wiki/Brute-force_attack">brute-force attacks</a><span class="link-target"> [https://en.wikipedia.org/wiki/Brute-force_attack]</span>,
tokens need to have sufficient randomness.  Unfortunately, what is
considered sufficient will necessarily increase as computers get more
powerful and able to make more guesses in a shorter period.  As of 2015,
it is believed that 32 bytes (256 bits) of randomness is sufficient for
the typical use-case expected for the <a class="reference internal" href="#module-secrets" title="secrets: Generate secure random numbers for managing secrets."><code class="xref py py-mod docutils literal notranslate"><span class="pre">secrets</span></code></a> module.</p>
<p>For those who want to manage their own token length, you can explicitly
specify how much randomness is used for tokens by giving an <a class="reference internal" href="functions.xhtml#int" title="int"><code class="xref py py-class docutils literal notranslate"><span class="pre">int</span></code></a>
argument to the various <code class="docutils literal notranslate"><span class="pre">token_*</span></code> functions.  That argument is taken
as the number of bytes of randomness to use.</p>
<p>Otherwise, if no argument is provided, or if the argument is <code class="docutils literal notranslate"><span class="pre">None</span></code>,
the <code class="docutils literal notranslate"><span class="pre">token_*</span></code> functions will use a reasonable default instead.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>That default is subject to change at any time, including during
maintenance releases.</p>
</div>
</section>
</section>
<section id="other-functions">
<h2 class="sigil_not_in_toc">Other functions</h2>
<dl class="py function">
<dt class="sig sig-object py" id="secrets.compare_digest">
<span class="sig-prename descclassname"><span class="pre">secrets.</span></span><span class="sig-name descname"><span class="pre">compare_digest</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">a</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">b</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return <code class="docutils literal notranslate"><span class="pre">True</span></code> if strings or
<a class="reference internal" href="../glossary.xhtml#term-bytes-like-object"><span class="xref std std-term">bytes-like objects</span></a>
<em>a</em> and <em>b</em> are equal, otherwise <code class="docutils literal notranslate"><span class="pre">False</span></code>,
using a “constant-time compare” to reduce the risk of
<a class="reference external" href="https://codahale.com/a-lesson-in-timing-attacks/">timing attacks</a><span class="link-target"> [https://codahale.com/a-lesson-in-timing-attacks/]</span>.
See <a class="reference internal" href="hmac.xhtml#hmac.compare_digest" title="hmac.compare_digest"><code class="xref py py-func docutils literal notranslate"><span class="pre">hmac.compare_digest()</span></code></a> for additional details.</p>
</dd>
</dl>

</section>
<section id="recipes-and-best-practices">
<h2 class="sigil_not_in_toc">Recipes and best practices</h2>
<p>This section shows recipes and best practices for using <a class="reference internal" href="#module-secrets" title="secrets: Generate secure random numbers for managing secrets."><code class="xref py py-mod docutils literal notranslate"><span class="pre">secrets</span></code></a>
to manage a basic level of security.</p>
<p>Generate an eight-character alphanumeric password:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span><span class="w"> </span><span class="nn">string</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">secrets</span>
<span class="n">alphabet</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">ascii_letters</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">digits</span>
<span class="n">password</span> <span class="o">=</span> <span class="s1">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">secrets</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">alphabet</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
</pre>
</div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Applications should not
<span class="target" id="index-1"></span><a class="cwe reference external" href="https://cwe.mitre.org/data/definitions/257.html"><strong>store passwords in a recoverable format</strong></a><span class="link-target"> [https://cwe.mitre.org/data/definitions/257.html]</span>,
whether plain text or encrypted.  They should be salted and hashed
using a cryptographically strong one-way (irreversible) hash function.</p>
</div>
<p>Generate a ten-character alphanumeric password with at least one
lowercase character, at least one uppercase character, and at least
three digits:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span><span class="w"> </span><span class="nn">string</span>
<span class="kn">import</span><span class="w"> </span><span class="nn">secrets</span>
<span class="n">alphabet</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">ascii_letters</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">digits</span>
<span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
    <span class="n">password</span> <span class="o">=</span> <span class="s1">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">secrets</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">alphabet</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">any</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">islower</span><span class="p">()</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">password</span><span class="p">)</span>
            <span class="ow">and</span> <span class="nb">any</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">isupper</span><span class="p">()</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">password</span><span class="p">)</span>
            <span class="ow">and</span> <span class="nb">sum</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">isdigit</span><span class="p">()</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">password</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">):</span>
        <span class="k">break</span>
</pre>
</div>
</div>
<p>Generate an <a class="reference external" href="https://xkcd.com/936/">XKCD-style passphrase</a><span class="link-target"> [https://xkcd.com/936/]</span>:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span><span class="w"> </span><span class="nn">secrets</span>
<span class="c1"># On standard Linux systems, use a convenient dictionary file.</span>
<span class="c1"># Other platforms may need to provide their own word-list.</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">'/usr/share/dict/words'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">f</span><span class="p">]</span>
    <span class="n">password</span> <span class="o">=</span> <span class="s1">' '</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">secrets</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">words</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
</pre>
</div>
</div>
<p>Generate a hard-to-guess temporary URL containing a security token
suitable for password recovery applications:</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span><span class="w"> </span><span class="nn">secrets</span>
<span class="n">url</span> <span class="o">=</span> <span class="s1">'https://example.com/reset='</span> <span class="o">+</span> <span class="n">secrets</span><span class="o">.</span><span class="n">token_urlsafe</span><span class="p">()</span>
</pre>
</div>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
</body>
</html>