<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<meta property="og:title" content="Futures"/>
<meta property="og:type" content="website"/>
<meta property="og:url" content="https://docs.python.org/3/library/asyncio-future.xhtml"/>
<meta property="og:site_name" content="Python documentation"/>
<meta property="og:description" content="Source code: Lib/asyncio/futures.py[https://github.com/python/cpython/tree/3.13/Lib/asyncio/futures.py], Lib/asyncio/base_futures.py[https://github.com/python/cpython/tree/3.13/Lib/asyncio/base_fut..."/>
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png"/>
<meta property="og:image:alt" content="Python documentation"/>
<meta name="description" content="Source code: Lib/asyncio/futures.py[https://github.com/python/cpython/tree/3.13/Lib/asyncio/futures.py], Lib/asyncio/base_futures.py[https://github.com/python/cpython/tree/3.13/Lib/asyncio/base_fut..."/>
<meta property="og:image:width" content="200"/>
<meta property="og:image:height" content="200"/>
<meta name="theme-color" content="#3776ab"/>

    <title>Futures</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css"/>
    <link rel="stylesheet" type="text/css" href="../_static/epub.css"/>
    
    <link rel="canonical" href="https://docs.python.org/3/library/asyncio-future.html"/>
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head>
<body>
    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="futures">
<span id="asyncio-futures"></span><h1>Futures</h1>
<p><strong>Source code:</strong> <a class="extlink-source reference external" href="https://github.com/python/cpython/tree/3.13/Lib/asyncio/futures.py">Lib/asyncio/futures.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.13/Lib/asyncio/futures.py]</span>,
<a class="extlink-source reference external" href="https://github.com/python/cpython/tree/3.13/Lib/asyncio/base_futures.py">Lib/asyncio/base_futures.py</a><span class="link-target"> [https://github.com/python/cpython/tree/3.13/Lib/asyncio/base_futures.py]</span></p>
<hr class="docutils"/>
<p><em>Future</em> objects are used to bridge <strong>low-level callback-based code</strong>
with high-level async/await code.</p>
<section id="future-functions">
<h2 class="sigil_not_in_toc">Future Functions</h2>
<dl class="py function">
<dt class="sig sig-object py" id="asyncio.isfuture">
<span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">isfuture</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">obj</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return <code class="docutils literal notranslate"><span class="pre">True</span></code> if <em>obj</em> is either of:</p>
<ul class="simple">
<li><p>an instance of <a class="reference internal" href="#asyncio.Future" title="asyncio.Future"><code class="xref py py-class docutils literal notranslate"><span class="pre">asyncio.Future</span></code></a>,</p></li>
<li><p>an instance of <a class="reference internal" href="asyncio-task.xhtml#asyncio.Task" title="asyncio.Task"><code class="xref py py-class docutils literal notranslate"><span class="pre">asyncio.Task</span></code></a>,</p></li>
<li><p>a Future-like object with a <code class="docutils literal notranslate"><span class="pre">_asyncio_future_blocking</span></code>
attribute.</p></li>
</ul>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.5.</span></p>
</div>
</dd>
</dl>

<dl class="py function">
<dt class="sig sig-object py" id="asyncio.ensure_future">
<span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">ensure_future</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">obj</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">loop</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Return:</p>
<ul class="simple">
<li><p><em>obj</em> argument as is, if <em>obj</em> is a <a class="reference internal" href="#asyncio.Future" title="asyncio.Future"><code class="xref py py-class docutils literal notranslate"><span class="pre">Future</span></code></a>,
a <a class="reference internal" href="asyncio-task.xhtml#asyncio.Task" title="asyncio.Task"><code class="xref py py-class docutils literal notranslate"><span class="pre">Task</span></code></a>, or a Future-like object (<a class="reference internal" href="#asyncio.isfuture" title="asyncio.isfuture"><code class="xref py py-func docutils literal notranslate"><span class="pre">isfuture()</span></code></a>
is used for the test.)</p></li>
<li><p>a <a class="reference internal" href="asyncio-task.xhtml#asyncio.Task" title="asyncio.Task"><code class="xref py py-class docutils literal notranslate"><span class="pre">Task</span></code></a> object wrapping <em>obj</em>, if <em>obj</em> is a
coroutine (<a class="reference internal" href="asyncio-task.xhtml#asyncio.iscoroutine" title="asyncio.iscoroutine"><code class="xref py py-func docutils literal notranslate"><span class="pre">iscoroutine()</span></code></a> is used for the test);
in this case the coroutine will be scheduled by
<code class="docutils literal notranslate"><span class="pre">ensure_future()</span></code>.</p></li>
<li><p>a <a class="reference internal" href="asyncio-task.xhtml#asyncio.Task" title="asyncio.Task"><code class="xref py py-class docutils literal notranslate"><span class="pre">Task</span></code></a> object that would await on <em>obj</em>, if <em>obj</em> is an
awaitable (<a class="reference internal" href="inspect.xhtml#inspect.isawaitable" title="inspect.isawaitable"><code class="xref py py-func docutils literal notranslate"><span class="pre">inspect.isawaitable()</span></code></a> is used for the test.)</p></li>
</ul>
<p>If <em>obj</em> is neither of the above a <a class="reference internal" href="exceptions.xhtml#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a> is raised.</p>
<div class="admonition important">
<p class="admonition-title">Important</p>
<p>See also the <a class="reference internal" href="asyncio-task.xhtml#asyncio.create_task" title="asyncio.create_task"><code class="xref py py-func docutils literal notranslate"><span class="pre">create_task()</span></code></a> function which is the
preferred way for creating new Tasks.</p>
<p>Save a reference to the result of this function, to avoid
a task disappearing mid-execution.</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">Changed in version 3.5.1: </span>The function accepts any <a class="reference internal" href="../glossary.xhtml#term-awaitable"><span class="xref std std-term">awaitable</span></a> object.</p>
</div>
<div class="deprecated">
<p><span class="versionmodified deprecated">Deprecated since version 3.10: </span>Deprecation warning is emitted if <em>obj</em> is not a Future-like object
and <em>loop</em> is not specified and there is no running event loop.</p>
</div>
</dd>
</dl>

<dl class="py function">
<dt class="sig sig-object py" id="asyncio.wrap_future">
<span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">wrap_future</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">future</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">loop</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Wrap a <a class="reference internal" href="concurrent.futures.xhtml#concurrent.futures.Future" title="concurrent.futures.Future"><code class="xref py py-class docutils literal notranslate"><span class="pre">concurrent.futures.Future</span></code></a> object in a
<a class="reference internal" href="#asyncio.Future" title="asyncio.Future"><code class="xref py py-class docutils literal notranslate"><span class="pre">asyncio.Future</span></code></a> object.</p>
<div class="deprecated">
<p><span class="versionmodified deprecated">Deprecated since version 3.10: </span>Deprecation warning is emitted if <em>future</em> is not a Future-like object
and <em>loop</em> is not specified and there is no running event loop.</p>
</div>
</dd>
</dl>

</section>
<section id="future-object">
<h2 class="sigil_not_in_toc">Future Object</h2>
<dl class="py class">
<dt class="sig sig-object py" id="asyncio.Future">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">asyncio.</span></span><span class="sig-name descname"><span class="pre">Future</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">loop</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>A Future represents an eventual result of an asynchronous
operation.  Not thread-safe.</p>
<p>Future is an <a class="reference internal" href="../glossary.xhtml#term-awaitable"><span class="xref std std-term">awaitable</span></a> object.  Coroutines can await on
Future objects until they either have a result or an exception
set, or until they are cancelled. A Future can be awaited multiple
times and the result is same.</p>
<p>Typically Futures are used to enable low-level
callback-based code (e.g. in protocols implemented using asyncio
<a class="reference internal" href="asyncio-protocol.xhtml#asyncio-transports-protocols"><span class="std std-ref">transports</span></a>)
to interoperate with high-level async/await code.</p>
<p>The rule of thumb is to never expose Future objects in user-facing
APIs, and the recommended way to create a Future object is to call
<a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.create_future" title="asyncio.loop.create_future"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.create_future()</span></code></a>.  This way alternative event loop
implementations can inject their own optimized implementations
of a Future object.</p>
<div class="versionchanged">
<p><span class="versionmodified changed">Changed in version 3.7: </span>Added support for the <a class="reference internal" href="contextvars.xhtml#module-contextvars" title="contextvars: Context Variables"><code class="xref py py-mod docutils literal notranslate"><span class="pre">contextvars</span></code></a> module.</p>
</div>
<div class="deprecated">
<p><span class="versionmodified deprecated">Deprecated since version 3.10: </span>Deprecation warning is emitted if <em>loop</em> is not specified
and there is no running event loop.</p>
</div>
<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Future.result">
<span class="sig-name descname"><span class="pre">result</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the result of the Future.</p>
<p>If the Future is <em>done</em> and has a result set by the
<a class="reference internal" href="#asyncio.Future.set_result" title="asyncio.Future.set_result"><code class="xref py py-meth docutils literal notranslate"><span class="pre">set_result()</span></code></a> method, the result value is returned.</p>
<p>If the Future is <em>done</em> and has an exception set by the
<a class="reference internal" href="#asyncio.Future.set_exception" title="asyncio.Future.set_exception"><code class="xref py py-meth docutils literal notranslate"><span class="pre">set_exception()</span></code></a> method, this method raises the exception.</p>
<p>If the Future has been <em>cancelled</em>, this method raises
a <a class="reference internal" href="asyncio-exceptions.xhtml#asyncio.CancelledError" title="asyncio.CancelledError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">CancelledError</span></code></a> exception.</p>
<p>If the Future’s result isn’t yet available, this method raises
an <a class="reference internal" href="asyncio-exceptions.xhtml#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">InvalidStateError</span></code></a> exception.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Future.set_result">
<span class="sig-name descname"><span class="pre">set_result</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">result</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Mark the Future as <em>done</em> and set its result.</p>
<p>Raises an <a class="reference internal" href="asyncio-exceptions.xhtml#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">InvalidStateError</span></code></a> error if the Future is
already <em>done</em>.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Future.set_exception">
<span class="sig-name descname"><span class="pre">set_exception</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">exception</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Mark the Future as <em>done</em> and set an exception.</p>
<p>Raises an <a class="reference internal" href="asyncio-exceptions.xhtml#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">InvalidStateError</span></code></a> error if the Future is
already <em>done</em>.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Future.done">
<span class="sig-name descname"><span class="pre">done</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return <code class="docutils literal notranslate"><span class="pre">True</span></code> if the Future is <em>done</em>.</p>
<p>A Future is <em>done</em> if it was <em>cancelled</em> or if it has a result
or an exception set with <a class="reference internal" href="#asyncio.Future.set_result" title="asyncio.Future.set_result"><code class="xref py py-meth docutils literal notranslate"><span class="pre">set_result()</span></code></a> or
<a class="reference internal" href="#asyncio.Future.set_exception" title="asyncio.Future.set_exception"><code class="xref py py-meth docutils literal notranslate"><span class="pre">set_exception()</span></code></a> calls.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Future.cancelled">
<span class="sig-name descname"><span class="pre">cancelled</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return <code class="docutils literal notranslate"><span class="pre">True</span></code> if the Future was <em>cancelled</em>.</p>
<p>The method is usually used to check if a Future is not
<em>cancelled</em> before setting a result or an exception for it:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">if</span> <span class="ow">not</span> <span class="n">fut</span><span class="o">.</span><span class="n">cancelled</span><span class="p">():</span>
    <span class="n">fut</span><span class="o">.</span><span class="n">set_result</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</pre>
</div>
</div>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Future.add_done_callback">
<span class="sig-name descname"><span class="pre">add_done_callback</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">callback</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">context</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Add a callback to be run when the Future is <em>done</em>.</p>
<p>The <em>callback</em> is called with the Future object as its only
argument.</p>
<p>If the Future is already <em>done</em> when this method is called,
the callback is scheduled with <a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.call_soon" title="asyncio.loop.call_soon"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.call_soon()</span></code></a>.</p>
<p>An optional keyword-only <em>context</em> argument allows specifying a
custom <a class="reference internal" href="contextvars.xhtml#contextvars.Context" title="contextvars.Context"><code class="xref py py-class docutils literal notranslate"><span class="pre">contextvars.Context</span></code></a> for the <em>callback</em> to run in.
The current context is used when no <em>context</em> is provided.</p>
<p><a class="reference internal" href="functools.xhtml#functools.partial" title="functools.partial"><code class="xref py py-func docutils literal notranslate"><span class="pre">functools.partial()</span></code></a> can be used to pass parameters
to the callback, e.g.:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="c1"># Call 'print("Future:", fut)' when "fut" is done.</span>
<span class="n">fut</span><span class="o">.</span><span class="n">add_done_callback</span><span class="p">(</span>
    <span class="n">functools</span><span class="o">.</span><span class="n">partial</span><span class="p">(</span><span class="nb">print</span><span class="p">,</span> <span class="s2">"Future:"</span><span class="p">))</span>
</pre>
</div>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">Changed in version 3.7: </span>The <em>context</em> keyword-only parameter was added.
See <span class="target" id="index-0"></span><a class="pep reference external" href="https://peps.python.org/pep-0567/"><strong>PEP 567</strong></a><span class="link-target"> [https://peps.python.org/pep-0567/]</span> for more details.</p>
</div>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Future.remove_done_callback">
<span class="sig-name descname"><span class="pre">remove_done_callback</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">callback</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Remove <em>callback</em> from the callbacks list.</p>
<p>Returns the number of callbacks removed, which is typically 1,
unless a callback was added more than once.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Future.cancel">
<span class="sig-name descname"><span class="pre">cancel</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">msg</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span></dt>
<dd><p>Cancel the Future and schedule callbacks.</p>
<p>If the Future is already <em>done</em> or <em>cancelled</em>, return <code class="docutils literal notranslate"><span class="pre">False</span></code>.
Otherwise, change the Future’s state to <em>cancelled</em>,
schedule the callbacks, and return <code class="docutils literal notranslate"><span class="pre">True</span></code>.</p>
<div class="versionchanged">
<p><span class="versionmodified changed">Changed in version 3.9: </span>Added the <em>msg</em> parameter.</p>
</div>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Future.exception">
<span class="sig-name descname"><span class="pre">exception</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the exception that was set on this Future.</p>
<p>The exception (or <code class="docutils literal notranslate"><span class="pre">None</span></code> if no exception was set) is
returned only if the Future is <em>done</em>.</p>
<p>If the Future has been <em>cancelled</em>, this method raises a
<a class="reference internal" href="asyncio-exceptions.xhtml#asyncio.CancelledError" title="asyncio.CancelledError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">CancelledError</span></code></a> exception.</p>
<p>If the Future isn’t <em>done</em> yet, this method raises an
<a class="reference internal" href="asyncio-exceptions.xhtml#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">InvalidStateError</span></code></a> exception.</p>
</dd>
</dl>

<dl class="py method">
<dt class="sig sig-object py" id="asyncio.Future.get_loop">
<span class="sig-name descname"><span class="pre">get_loop</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span></dt>
<dd><p>Return the event loop the Future object is bound to.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</dd>
</dl>

</dd>
</dl>

<p id="asyncio-example-future">This example creates a Future object, creates and schedules an
asynchronous Task to set result for the Future, and waits until
the Future has a result:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">set_after</span><span class="p">(</span><span class="n">fut</span><span class="p">,</span> <span class="n">delay</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c1"># Sleep for *delay* seconds.</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">delay</span><span class="p">)</span>

    <span class="c1"># Set *value* as a result of *fut* Future.</span>
    <span class="n">fut</span><span class="o">.</span><span class="n">set_result</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span><span class="w"> </span><span class="nf">main</span><span class="p">():</span>
    <span class="c1"># Get the current event loop.</span>
    <span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">get_running_loop</span><span class="p">()</span>

    <span class="c1"># Create a new Future object.</span>
    <span class="n">fut</span> <span class="o">=</span> <span class="n">loop</span><span class="o">.</span><span class="n">create_future</span><span class="p">()</span>

    <span class="c1"># Run "set_after()" coroutine in a parallel Task.</span>
    <span class="c1"># We are using the low-level "loop.create_task()" API here because</span>
    <span class="c1"># we already have a reference to the event loop at hand.</span>
    <span class="c1"># Otherwise we could have just used "asyncio.create_task()".</span>
    <span class="n">loop</span><span class="o">.</span><span class="n">create_task</span><span class="p">(</span>
        <span class="n">set_after</span><span class="p">(</span><span class="n">fut</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">'... world'</span><span class="p">))</span>

    <span class="nb">print</span><span class="p">(</span><span class="s1">'hello ...'</span><span class="p">)</span>

    <span class="c1"># Wait until *fut* has a result (1 second) and print it.</span>
    <span class="nb">print</span><span class="p">(</span><span class="k">await</span> <span class="n">fut</span><span class="p">)</span>

<span class="n">asyncio</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">main</span><span class="p">())</span>
</pre>
</div>
</div>
<div class="admonition important">
<p class="admonition-title">Important</p>
<p>The Future object was designed to mimic
<a class="reference internal" href="concurrent.futures.xhtml#concurrent.futures.Future" title="concurrent.futures.Future"><code class="xref py py-class docutils literal notranslate"><span class="pre">concurrent.futures.Future</span></code></a>.  Key differences include:</p>
<ul class="simple">
<li><p>unlike asyncio Futures, <a class="reference internal" href="concurrent.futures.xhtml#concurrent.futures.Future" title="concurrent.futures.Future"><code class="xref py py-class docutils literal notranslate"><span class="pre">concurrent.futures.Future</span></code></a>
instances cannot be awaited.</p></li>
<li><p><a class="reference internal" href="#asyncio.Future.result" title="asyncio.Future.result"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Future.result()</span></code></a> and <a class="reference internal" href="#asyncio.Future.exception" title="asyncio.Future.exception"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Future.exception()</span></code></a>
do not accept the <em>timeout</em> argument.</p></li>
<li><p><a class="reference internal" href="#asyncio.Future.result" title="asyncio.Future.result"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Future.result()</span></code></a> and <a class="reference internal" href="#asyncio.Future.exception" title="asyncio.Future.exception"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Future.exception()</span></code></a>
raise an <a class="reference internal" href="asyncio-exceptions.xhtml#asyncio.InvalidStateError" title="asyncio.InvalidStateError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">InvalidStateError</span></code></a> exception when the Future is not
<em>done</em>.</p></li>
<li><p>Callbacks registered with <a class="reference internal" href="#asyncio.Future.add_done_callback" title="asyncio.Future.add_done_callback"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Future.add_done_callback()</span></code></a>
are not called immediately.  They are scheduled with
<a class="reference internal" href="asyncio-eventloop.xhtml#asyncio.loop.call_soon" title="asyncio.loop.call_soon"><code class="xref py py-meth docutils literal notranslate"><span class="pre">loop.call_soon()</span></code></a> instead.</p></li>
<li><p>asyncio Future is not compatible with the
<a class="reference internal" href="concurrent.futures.xhtml#concurrent.futures.wait" title="concurrent.futures.wait"><code class="xref py py-func docutils literal notranslate"><span class="pre">concurrent.futures.wait()</span></code></a> and
<a class="reference internal" href="concurrent.futures.xhtml#concurrent.futures.as_completed" title="concurrent.futures.as_completed"><code class="xref py py-func docutils literal notranslate"><span class="pre">concurrent.futures.as_completed()</span></code></a> functions.</p></li>
<li><p><a class="reference internal" href="#asyncio.Future.cancel" title="asyncio.Future.cancel"><code class="xref py py-meth docutils literal notranslate"><span class="pre">asyncio.Future.cancel()</span></code></a> accepts an optional <code class="docutils literal notranslate"><span class="pre">msg</span></code> argument,
but <a class="reference internal" href="concurrent.futures.xhtml#concurrent.futures.Future.cancel" title="concurrent.futures.Future.cancel"><code class="xref py py-meth docutils literal notranslate"><span class="pre">concurrent.futures.Future.cancel()</span></code></a> does not.</p></li>
</ul>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
</body>
</html>