<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="High-level API Index" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/asyncio-api-index.xhtml" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="This page lists all high-level async/await enabled asyncio APIs. Tasks: Utilities to run asyncio programs, create Tasks, and await on multiple things with timeouts.,, run(), Create event loop, run ..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="This page lists all high-level async/await enabled asyncio APIs. Tasks: Utilities to run asyncio programs, create Tasks, and await on multiple things with timeouts.,, run(), Create event loop, run ..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>High-level API Index</title>
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="../_static/epub.css" />
    
    <link rel="canonical" href="https://docs.python.org/3/library/asyncio-api-index.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
 

  </head><body>


    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="high-level-api-index">
<h1>High-level API Index</h1>
<p>This page lists all high-level async/await enabled asyncio APIs.</p>
<section id="tasks">
<h2>Tasks</h2>
<p>Utilities to run asyncio programs, create Tasks, and
await on multiple things with timeouts.</p>
<table class="full-width-table docutils align-default">
<colgroup>
<col style="width: 50.0%" />
<col style="width: 50.0%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-runner.xhtml#asyncio.run" title="asyncio.run"><code class="xref py py-func docutils literal notranslate"><span class="pre">run()</span></code></a></p></td>
<td><p>Create event loop, run a coroutine, close the loop.</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-runner.xhtml#asyncio.Runner" title="asyncio.Runner"><code class="xref py py-class docutils literal notranslate"><span class="pre">Runner</span></code></a></p></td>
<td><p>A context manager that simplifies multiple async function calls.</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.Task" title="asyncio.Task"><code class="xref py py-class docutils literal notranslate"><span class="pre">Task</span></code></a></p></td>
<td><p>Task object.</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.TaskGroup" title="asyncio.TaskGroup"><code class="xref py py-class docutils literal notranslate"><span class="pre">TaskGroup</span></code></a></p></td>
<td><p>A context manager that holds a group of tasks. Provides
a convenient and reliable way to wait for all tasks in the group to
finish.</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.create_task" title="asyncio.create_task"><code class="xref py py-func docutils literal notranslate"><span class="pre">create_task()</span></code></a></p></td>
<td><p>Start an asyncio Task, then returns it.</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.current_task" title="asyncio.current_task"><code class="xref py py-func docutils literal notranslate"><span class="pre">current_task()</span></code></a></p></td>
<td><p>Return the current Task.</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.all_tasks" title="asyncio.all_tasks"><code class="xref py py-func docutils literal notranslate"><span class="pre">all_tasks()</span></code></a></p></td>
<td><p>Return all tasks that are not yet finished for an event loop.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-task.xhtml#asyncio.sleep" title="asyncio.sleep"><code class="xref py py-func docutils literal notranslate"><span class="pre">sleep()</span></code></a></p></td>
<td><p>Sleep for a number of seconds.</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-task.xhtml#asyncio.gather" title="asyncio.gather"><code class="xref py py-func docutils literal notranslate"><span class="pre">gather()</span></code></a></p></td>
<td><p>Schedule and wait for things concurrently.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-task.xhtml#asyncio.wait_for" title="asyncio.wait_for"><code class="xref py py-func docutils literal notranslate"><span class="pre">wait_for()</span></code></a></p></td>
<td><p>Run with a timeout.</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-task.xhtml#asyncio.shield" title="asyncio.shield"><code class="xref py py-func docutils literal notranslate"><span class="pre">shield()</span></code></a></p></td>
<td><p>Shield from cancellation.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-task.xhtml#asyncio.wait" title="asyncio.wait"><code class="xref py py-func docutils literal notranslate"><span class="pre">wait()</span></code></a></p></td>
<td><p>Monitor for completion.</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.timeout" title="asyncio.timeout"><code class="xref py py-func docutils literal notranslate"><span class="pre">timeout()</span></code></a></p></td>
<td><p>Run with a timeout. Useful in cases when <code class="docutils literal notranslate"><span class="pre">wait_for</span></code> is not suitable.</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.to_thread" title="asyncio.to_thread"><code class="xref py py-func docutils literal notranslate"><span class="pre">to_thread()</span></code></a></p></td>
<td><p>Asynchronously run a function in a separate OS thread.</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-task.xhtml#asyncio.run_coroutine_threadsafe" title="asyncio.run_coroutine_threadsafe"><code class="xref py py-func docutils literal notranslate"><span class="pre">run_coroutine_threadsafe()</span></code></a></p></td>
<td><p>Schedule a coroutine from another OS thread.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">for</span> <span class="pre">in</span></code> <a class="reference internal" href="asyncio-task.xhtml#asyncio.as_completed" title="asyncio.as_completed"><code class="xref py py-func docutils literal notranslate"><span class="pre">as_completed()</span></code></a></p></td>
<td><p>Monitor for completion with a <code class="docutils literal notranslate"><span class="pre">for</span></code> loop.</p></td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-task.xhtml#asyncio-example-gather"><span class="std std-ref">Using asyncio.gather() to run things in parallel</span></a>.</p></li>
<li><p><a class="reference internal" href="asyncio-task.xhtml#asyncio-example-waitfor"><span class="std std-ref">Using asyncio.wait_for() to enforce a timeout</span></a>.</p></li>
<li><p><a class="reference internal" href="asyncio-task.xhtml#asyncio-example-task-cancel"><span class="std std-ref">Cancellation</span></a>.</p></li>
<li><p><a class="reference internal" href="asyncio-task.xhtml#asyncio-example-sleep"><span class="std std-ref">Using asyncio.sleep()</span></a>.</p></li>
<li><p>See also the main <a class="reference internal" href="asyncio-task.xhtml#coroutine"><span class="std std-ref">Tasks documentation page</span></a>.</p></li>
</ul>
</section>
<section id="queues">
<h2>Queues</h2>
<p>Queues should be used to distribute work amongst multiple asyncio Tasks,
implement connection pools, and pub/sub patterns.</p>
<table class="full-width-table docutils align-default">
<colgroup>
<col style="width: 50.0%" />
<col style="width: 50.0%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-queue.xhtml#asyncio.Queue" title="asyncio.Queue"><code class="xref py py-class docutils literal notranslate"><span class="pre">Queue</span></code></a></p></td>
<td><p>A FIFO queue.</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-queue.xhtml#asyncio.PriorityQueue" title="asyncio.PriorityQueue"><code class="xref py py-class docutils literal notranslate"><span class="pre">PriorityQueue</span></code></a></p></td>
<td><p>A priority queue.</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-queue.xhtml#asyncio.LifoQueue" title="asyncio.LifoQueue"><code class="xref py py-class docutils literal notranslate"><span class="pre">LifoQueue</span></code></a></p></td>
<td><p>A LIFO queue.</p></td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-queue.xhtml#asyncio-example-queue-dist"><span class="std std-ref">Using asyncio.Queue to distribute workload between several
Tasks</span></a>.</p></li>
<li><p>See also the <a class="reference internal" href="asyncio-queue.xhtml#asyncio-queues"><span class="std std-ref">Queues documentation page</span></a>.</p></li>
</ul>
</section>
<section id="subprocesses">
<h2>Subprocesses</h2>
<p>Utilities to spawn subprocesses and run shell commands.</p>
<table class="full-width-table docutils align-default">
<colgroup>
<col style="width: 50.0%" />
<col style="width: 50.0%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-subprocess.xhtml#asyncio.create_subprocess_exec" title="asyncio.create_subprocess_exec"><code class="xref py py-func docutils literal notranslate"><span class="pre">create_subprocess_exec()</span></code></a></p></td>
<td><p>Create a subprocess.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-subprocess.xhtml#asyncio.create_subprocess_shell" title="asyncio.create_subprocess_shell"><code class="xref py py-func docutils literal notranslate"><span class="pre">create_subprocess_shell()</span></code></a></p></td>
<td><p>Run a shell command.</p></td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-subprocess.xhtml#asyncio-example-subprocess-shell"><span class="std std-ref">Executing a shell command</span></a>.</p></li>
<li><p>See also the <a class="reference internal" href="asyncio-subprocess.xhtml#asyncio-subprocess"><span class="std std-ref">subprocess APIs</span></a>
documentation.</p></li>
</ul>
</section>
<section id="streams">
<h2>Streams</h2>
<p>High-level APIs to work with network IO.</p>
<table class="full-width-table docutils align-default">
<colgroup>
<col style="width: 50.0%" />
<col style="width: 50.0%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-stream.xhtml#asyncio.open_connection" title="asyncio.open_connection"><code class="xref py py-func docutils literal notranslate"><span class="pre">open_connection()</span></code></a></p></td>
<td><p>Establish a TCP connection.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-stream.xhtml#asyncio.open_unix_connection" title="asyncio.open_unix_connection"><code class="xref py py-func docutils literal notranslate"><span class="pre">open_unix_connection()</span></code></a></p></td>
<td><p>Establish a Unix socket connection.</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-stream.xhtml#asyncio.start_server" title="asyncio.start_server"><code class="xref py py-func docutils literal notranslate"><span class="pre">start_server()</span></code></a></p></td>
<td><p>Start a TCP server.</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">await</span></code> <a class="reference internal" href="asyncio-stream.xhtml#asyncio.start_unix_server" title="asyncio.start_unix_server"><code class="xref py py-func docutils literal notranslate"><span class="pre">start_unix_server()</span></code></a></p></td>
<td><p>Start a Unix socket server.</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-stream.xhtml#asyncio.StreamReader" title="asyncio.StreamReader"><code class="xref py py-class docutils literal notranslate"><span class="pre">StreamReader</span></code></a></p></td>
<td><p>High-level async/await object to receive network data.</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-stream.xhtml#asyncio.StreamWriter" title="asyncio.StreamWriter"><code class="xref py py-class docutils literal notranslate"><span class="pre">StreamWriter</span></code></a></p></td>
<td><p>High-level async/await object to send network data.</p></td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-stream.xhtml#asyncio-example-stream"><span class="std std-ref">Example TCP client</span></a>.</p></li>
<li><p>See also the <a class="reference internal" href="asyncio-stream.xhtml#asyncio-streams"><span class="std std-ref">streams APIs</span></a>
documentation.</p></li>
</ul>
</section>
<section id="synchronization">
<h2>Synchronization</h2>
<p>Threading-like synchronization primitives that can be used in Tasks.</p>
<table class="full-width-table docutils align-default">
<colgroup>
<col style="width: 50.0%" />
<col style="width: 50.0%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.Lock" title="asyncio.Lock"><code class="xref py py-class docutils literal notranslate"><span class="pre">Lock</span></code></a></p></td>
<td><p>A mutex lock.</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.Event" title="asyncio.Event"><code class="xref py py-class docutils literal notranslate"><span class="pre">Event</span></code></a></p></td>
<td><p>An event object.</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.Condition" title="asyncio.Condition"><code class="xref py py-class docutils literal notranslate"><span class="pre">Condition</span></code></a></p></td>
<td><p>A condition object.</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.Semaphore" title="asyncio.Semaphore"><code class="xref py py-class docutils literal notranslate"><span class="pre">Semaphore</span></code></a></p></td>
<td><p>A semaphore.</p></td>
</tr>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.BoundedSemaphore" title="asyncio.BoundedSemaphore"><code class="xref py py-class docutils literal notranslate"><span class="pre">BoundedSemaphore</span></code></a></p></td>
<td><p>A bounded semaphore.</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.Barrier" title="asyncio.Barrier"><code class="xref py py-class docutils literal notranslate"><span class="pre">Barrier</span></code></a></p></td>
<td><p>A barrier object.</p></td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio-example-sync-event"><span class="std std-ref">Using asyncio.Event</span></a>.</p></li>
<li><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio-example-barrier"><span class="std std-ref">Using asyncio.Barrier</span></a>.</p></li>
<li><p>See also the documentation of asyncio
<a class="reference internal" href="asyncio-sync.xhtml#asyncio-sync"><span class="std std-ref">synchronization primitives</span></a>.</p></li>
</ul>
</section>
<section id="exceptions">
<h2>Exceptions</h2>
<table class="full-width-table docutils align-default">
<colgroup>
<col style="width: 50.0%" />
<col style="width: 50.0%" />
</colgroup>
<tbody>
<tr class="row-odd"><td><p><a class="reference internal" href="asyncio-exceptions.xhtml#asyncio.CancelledError" title="asyncio.CancelledError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">asyncio.CancelledError</span></code></a></p></td>
<td><p>Raised when a Task is cancelled. See also <a class="reference internal" href="asyncio-task.xhtml#asyncio.Task.cancel" title="asyncio.Task.cancel"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Task.cancel()</span></code></a>.</p></td>
</tr>
<tr class="row-even"><td><p><a class="reference internal" href="asyncio-sync.xhtml#asyncio.BrokenBarrierError" title="asyncio.BrokenBarrierError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">asyncio.BrokenBarrierError</span></code></a></p></td>
<td><p>Raised when a Barrier is broken. See also <a class="reference internal" href="asyncio-sync.xhtml#asyncio.Barrier.wait" title="asyncio.Barrier.wait"><code class="xref py py-meth docutils literal notranslate"><span class="pre">Barrier.wait()</span></code></a>.</p></td>
</tr>
</tbody>
</table>
<p class="rubric">Examples</p>
<ul class="simple">
<li><p><a class="reference internal" href="asyncio-task.xhtml#asyncio-example-task-cancel"><span class="std std-ref">Handling CancelledError to run code on cancellation request</span></a>.</p></li>
<li><p>See also the full list of
<a class="reference internal" href="asyncio-exceptions.xhtml#asyncio-exceptions"><span class="std std-ref">asyncio-specific exceptions</span></a>.</p></li>
</ul>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>